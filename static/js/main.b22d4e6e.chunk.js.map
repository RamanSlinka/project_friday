{"version":3,"sources":["n1-main/m2-bll/redux/pack-reducer.ts","n1-main/m3-dal/Api.tsx","n1-main/m2-bll/redux/app-reducer.ts","n1-main/m2-bll/redux/auth-reducer.ts","n1-main/m1-ui/Pages/LoginPage.tsx","n1-main/m1-ui/Pages/ProfilePage.tsx","n1-main/m1-ui/Pages/NotFoundPage.tsx","n1-main/m1-ui/common/icons/LoadingIcon.tsx","n1-main/m1-ui/common/c7-Progress/Loading.tsx","n1-main/m1-ui/Pages/RestorePassPage.tsx","n1-main/m1-ui/Pages/NewPassPage.tsx","n1-main/m1-ui/common/icons/MessageIcon.tsx","n1-main/m1-ui/Pages/RestorePassCheckEmailPage.tsx","n1-main/m1-ui/Pages/Pack/RangeSlider.tsx","n1-main/m1-ui/Pages/Pack/RangeShowCard.tsx","n1-main/m1-ui/common/c8-Table/DeckTableHeader.tsx","n1-main/m1-ui/common/c8-Table/DeckTable.tsx","n1-main/m1-ui/Pages/Pack/Search.tsx","n1-main/m1-ui/Pages/Pack/Packs.tsx","n1-main/m1-ui/Pages/SignupPage.tsx","n1-main/m2-bll/redux/card-reducer.ts","n1-main/m1-ui/Pages/Cards/CardListPage.tsx","n1-main/m1-ui/Routes.tsx","n1-main/m1-ui/Header/Header.tsx","n1-main/m1-ui/ErrorSnackbar/ErrorSnackbar.tsx","n1-main/App.tsx","reportWebVitals.ts","n1-main/m2-bll/redux/store.ts","n1-main/m1-ui/common/theme.ts","index.tsx"],"names":["ACTIONS_TYPE","instance","axios","create","baseURL","withCredentials","acsessAPI","email","password","rememberMe","post","delete","from","message","resetPasswordToken","pack","queryPackObject","get","id","params","queryCardsObject","initState","errorMessage","appStatus","error","setMessageErrorAC","type","setAppStatusAC","value","setAppErrorAC","isLoggedIn","isFetching","isPassRequestSent","isPassChanged","_id","name","avatar","publicCardPacksCount","created","update","isAdmin","verified","loggedInAC","signupAC","setPassRequestAC","profileAC","useStyles","makeStyles","theme","createStyles","root","textAlign","padding","width","formTitle","marginBottom","formSubtitle","formDescription","formButtonBlock","margin","display","alignItems","displayStretch","textFieldArea","LoginPage","classes","dispatch","useDispatch","useSelector","state","auth","isLoggedError","restoreSchema","Yup","shape","required","formik","useFormik","initialValues","remember","validationSchema","onSubmit","values","then","res","data","catch","rej","response","resetForm","to","Grid","container","justify","style","minHeight","item","Card","className","handleSubmit","Typography","variant","color","FormControl","FormGroup","TextField","label","getFieldProps","touched","errors","align","FormControlLabel","control","Checkbox","Button","onClick","formLinkTitle","marginTop","Link","component","NavLink","PATH","SIGNUP","ProfilePage","userProfile","useEffect","console","log","xs","src","ALL_ROUTES","NotFoundPage","LoadingIcon","size","xmlns","height","viewBox","fill","d","maxWidth","loadingTitle","loadingMessage","Loading","props","justifyContent","paddingTop","paddingBottom","RestorePassPage","app","success","status","request","RESTORE_PASS_CHECK_EMAIL","LOGIN","errorBlock","NewPassPage","useState","showPassword","setShowPassword","token","useParams","min","matches","Input","placeholder","endAdornment","InputAdornment","position","IconButton","onMouseDown","edge","Visibility","VisibilityOff","MessageIcon","x1","x2","y1","y2","gradientUnits","offset","stopColor","stopOpacity","opacity","cx","cy","rx","ry","transform","formIcon","initialPackState","cardPacks","packName","max","isSortTypeAscending","sortField","user_id","page","pageCount","cardPacksTotalCount","setCardsPackAC","SET_CARDS_PACK","payload","setPageCountAC","SET_PACK_PAGE_COUNT","setPageAC","SET_PACK_PAGE","setPackNameAC","SET_PACK_NAME","getAllPack","getState","sortPacks","getPackQueryObject","length","SET_PACK_TOTAL_COUNT","valuetext","RangeSlider","React","setValue","setTO","setTimeout","clearTimeout","Slider","onChange","event","newValue","valueLabelDisplay","getAriaValueText","flexGrow","privateModeHeader","privateModeBlock","modeButton","borderRadius","paper","sliderCaption","CenteredGrid","ButtonGroup","alert","gutterBottom","headCells","numeric","disablePadding","spacing","table","minWidth","visuallyHidden","border","clip","overflow","top","DeckTableHeader","onRequestSort","numSelected","rowCount","TableHead","TableRow","map","headCell","TableCell","sortDirection","TableSortLabel","active","direction","property","tableRow","backgroundColor","palette","action","hover","DeckTable","selected","getAllPacks","Paper","TableContainer","Table","SET_PACK_SORT_TYPE","TableBody","deck","index","labelId","role","tabIndex","scope","slice","cardsCount","moment","updated","format","user_name","packId","TablePagination","rowsPerPageOptions","count","rowsPerPage","onPageChange","newPage","onRowsPerPageChange","parseInt","target","rootGrid","search","searchInputBlock","addDeckBlock","marginLeft","FullWidthGrid","setSearch","path","grade","shots","rating","deckCover","addPack","addNewPackObject","newPackObject","typeDeck","cardsPack","onKeyUp","key","filterBlock","mainBlock","boxSizing","mainSearchBlock","mainSearchHeader","mainTableBlock","Pack","elevation","square","resetButton","flex","marginRight","submitButton","SignupPage","cfPassword","validate","test","initialCardState","cards","packUserId","cardsTotalCount","minGrade","maxGrade","SET_PAGE_COUNT","SET_PAGE","setCardsArrayAC","SET_CARDS_ARRAY","getAllCardsTS","sortCards","card","cardsQueryObject","cardsPack_id","SET_CARDS_TOTAL_COUNT","setCardsTotalCountAC","SET_PACK_USER_ID","SET_MIN_GRADE","setMinGradeAC","SET_MAX_GRADE","setMaxGradeAC","CardListPage","question","answer","PROFILE","NOTFOUND","RESTORE_PASS","NEW_PASS","PACK","CARDS","TEST_PAGE","Routes","exact","render","RestorePassCheckEmailPage","listBlock","flexDirection","iconBlock","menuItem","Header","history","useHistory","AppBar","Toolbar","itemMenu","Menu","push","LinearProgress","Alert","ErrorSnackbar","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","SET_PACK_MAX","SET_PACK_MIN","SET_SORT_FIELD","SET_SORT_ASC","store","createStore","applyMiddleware","thunkMiddleware","muiTheme","createTheme","overrides","MuiCssBaseline","body","background","backgroundRepeat","backgroundAttachment","MuiButton","fontSize","fontFamily","fontWeight","fontStyle","lineHeight","textTransform","MuiCard","MuiLink","MuiTextField","MuiInput","typography","h1","h2","h3","body1","join","primary","light","main","dark","secondary","warning","info","text","ReactDOM","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.b22d4e6e.chunk.js","sourcesContent":["import {\r\n    acsessAPI,\r\n    GetPackQueryParamsType,\r\n    GetPackResponseWithDateType, NewPackFieldsType, NewPackObjectDataType,\r\n    PackDataType,\r\n    PackResponseDataType, PackUpdateFieldsType, PackUpdateObjectType\r\n} from \"../../m3-dal/Api\";\r\nimport {setAppErrorAC, setAppStatusAC, setMessageErrorAC} from \"./app-reducer\";\r\nimport {AnyAction, Dispatch} from \"redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStoreType} from \"./store\";\r\n\r\n\r\nexport enum ACTIONS_TYPE {\r\n    SET_CARDS_PACK = 'PackReducer/SET_CARDS_PACK',\r\n    SET_PACK_NAME = 'PackReducer/SET_PACK_NAME',\r\n    SET_PACK_MIN = 'PackReducer/SET_PACK_MIN',\r\n    SET_PACK_MAX = 'PackReducer/SET_PACK_MAX',\r\n    SET_PACK_PAGE = 'PackReducer/SET_PACK_PAGE',\r\n    SET_PACK_PAGE_COUNT = 'PackReducer/SET_PACK_PAGE_COUNT',\r\n    SET_PACK_TOTAL_COUNT = 'PackReducer/SET_PACK_TOTAL_COUNT',\r\n    SET_PACK_USER_ID = 'PackReducer/SET_PACK_USER_ID',\r\n    SET_PACK_SORT_TYPE = 'PackReducer/SET_PACK_SORT_TYPE',\r\n    SET_PACK_SORT_FIELD = 'PackReducer/SET_PACK_SORT_FIELD',\r\n    ADD_NEW_PACK = 'PackReducer/ADD_NEW_PACK',\r\n    GET_PACKS = 'PackReducer/GET_PACKS',\r\n}\r\n\r\nexport interface InitialPackStateType {\r\n    cardPacks: Array<PackResponseDataType>,\r\n    /*Query params*/\r\n    packName: string | null\r\n    // minCardsCount\r\n    min: number | null\r\n    // maxCardsCount\r\n    max: number | null\r\n    // sort params\r\n    //sortPacks: string\r\n    isSortTypeAscending: boolean\r\n    sortField: keyof PackDataType | null\r\n    page: number\r\n    pageCount: number\r\n    user_id: string | null\r\n    /* getting from server */\r\n    cardPacksTotalCount: number\r\n    /*minCardsCount: number | null\r\n    maxCardsCount: number | null*/\r\n}\r\n\r\nconst initialPackState: InitialPackStateType = {\r\n    cardPacks: [],\r\n    packName: null,\r\n    // minCardsCount, maxCardsCount\r\n    min: null,\r\n    max: null,\r\n    isSortTypeAscending: false,\r\n    sortField: \"name\",\r\n    user_id: null,\r\n    // current page\r\n    page: 0,\r\n    // packs per page\r\n    pageCount: 5,\r\n    // packs total count\r\n    cardPacksTotalCount: 0,\r\n}\r\n\r\n\r\nexport const packReducer = (state: InitialPackStateType = initialPackState, action: CombinedActionType): InitialPackStateType => {\r\n    /*console.log('action type', action.type)*/\r\n    /*console.log('action payload', action.payload)*/\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.SET_CARDS_PACK:\r\n            /*debugger*/\r\n            return {\r\n                ...state,\r\n                cardPacks: [],\r\n                ...action.payload,\r\n            }\r\n        case ACTIONS_TYPE.SET_PACK_NAME:\r\n        case ACTIONS_TYPE.SET_PACK_MAX:\r\n        case ACTIONS_TYPE.SET_PACK_MIN:\r\n        case ACTIONS_TYPE.SET_PACK_PAGE:\r\n        case ACTIONS_TYPE.SET_PACK_PAGE_COUNT:\r\n        case ACTIONS_TYPE.SET_PACK_USER_ID:\r\n        case ACTIONS_TYPE.SET_PACK_SORT_TYPE:\r\n        case ACTIONS_TYPE.SET_PACK_TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setUserIdAC = (user_id: string) => ({\r\n    type: ACTIONS_TYPE.SET_PACK_USER_ID,\r\n    payload: {\r\n        user_id\r\n    }\r\n})\r\n\r\nexport const setPackSortType = (isSortTypeAscending: boolean, sortField: keyof PackDataType) => ({\r\n    type: ACTIONS_TYPE.SET_PACK_SORT_TYPE,\r\n    payload: {\r\n        isSortTypeAscending, sortField\r\n    }\r\n})\r\n\r\nexport const setCardsPackTotalCountAC = (cardPacksTotalCount: number) => ({\r\n    type: ACTIONS_TYPE.SET_PACK_TOTAL_COUNT,\r\n    payload: {\r\n        cardPacksTotalCount\r\n    }\r\n})\r\n\r\nexport const setCardsPackAC = (cardPacks: Array<PackResponseDataType>) => ({\r\n    type: ACTIONS_TYPE.SET_CARDS_PACK,\r\n    payload: {\r\n        cardPacks\r\n    }\r\n} as const)\r\n\r\nexport const setPageCountAC = (pageCount: number) => ({\r\n    type: ACTIONS_TYPE.SET_PACK_PAGE_COUNT,\r\n    payload: {\r\n        pageCount\r\n    }\r\n})\r\n\r\nexport const setPageAC = (page: number) => ({\r\n    type: ACTIONS_TYPE.SET_PACK_PAGE,\r\n    payload: {\r\n        page\r\n    }\r\n})\r\nexport const setMaxCardsCountAC = (max: number) => ({\r\n    type: ACTIONS_TYPE.SET_PACK_MAX,\r\n    payload: {\r\n        max\r\n    }\r\n})\r\nexport const setMinCardsCountAC = (min: number) => ({\r\n    type: ACTIONS_TYPE.SET_PACK_MIN,\r\n    payload: {\r\n        min\r\n    }\r\n})\r\nexport const setPackNameAC = (packName: string | null) => ({\r\n    type: ACTIONS_TYPE.SET_PACK_NAME,\r\n    payload: {\r\n        packName\r\n    }\r\n})\r\n\r\nexport type CombinedActionType =\r\n    SetPackNameActionType | SetMinCardsCountType |\r\n    SetMaxCardsCountType | SetUserIdType |\r\n    SetPageCountType | SetPageType | SetCardsPackType |\r\n    SetPackSortType\r\n\r\n\r\nexport type SetPackNameActionType = ReturnType<typeof setPackNameAC>\r\nexport type SetMinCardsCountType = ReturnType<typeof setMinCardsCountAC>\r\nexport type SetMaxCardsCountType = ReturnType<typeof setMaxCardsCountAC>\r\n\r\nexport type SetUserIdType = ReturnType<typeof setUserIdAC>\r\nexport type SetPageCountType = ReturnType<typeof setPageCountAC>\r\nexport type SetPageType = ReturnType<typeof setPageAC>\r\nexport type SetCardsPackType = ReturnType<typeof setCardsPackAC>\r\nexport type setCardsPackTotalCountType = ReturnType<typeof setCardsPackTotalCountAC>\r\n\r\nexport type SetPackSortType = ReturnType<typeof setPackSortType>\r\n/*export type SETPackSortFieldType = ReturnType<typeof SETPackSortFieldType>*/\r\n\r\nexport const getAllPack = () => {\r\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let {\r\n            packName, page, pageCount,\r\n            min, max, user_id, sortField,\r\n            isSortTypeAscending,\r\n        } = getState().pack;\r\n        let sortPacks\r\n        // if sortField set create sortPacks field '0created' '1updated'\r\n        if (sortField) {\r\n            sortPacks = +isSortTypeAscending + sortField;\r\n        }\r\n        // create GET query params object from state\r\n        const getPackQueryObject: GetPackQueryParamsType = {\r\n            params: {\r\n                ...(packName !== null && {packName}),\r\n                ...(min !== null && {min}),\r\n                ...(max !== null && {max}),\r\n                ...(page && {page: page}),\r\n                ...(pageCount && {pageCount}),\r\n                ...(user_id !== null && {user_id}),\r\n                ...(sortPacks && {sortPacks: sortPacks}),\r\n            }\r\n        }\r\n        acsessAPI.getCardPacks(getPackQueryObject)\r\n            .then(res => {\r\n                if (res.data && res.data.cardPacks.length > 0) {\r\n                    dispatch(setCardsPackAC(res.data.cardPacks))\r\n                } else {\r\n                    dispatch(setCardsPackAC([]))\r\n                }\r\n                /*dispatch(setMaxCardsCountAC(res.data.maxCardsCount))\r\n                dispatch(setMinCardsCountAC(res.data.minCardsCount))*/\r\n                dispatch(setPageAC(res.data.page))\r\n                dispatch(setPageCountAC(res.data.pageCount))\r\n                dispatch(setCardsPackTotalCountAC(res.data.cardPacksTotalCount))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setMessageErrorAC('Something went wrong'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const deletePackByIdTC = (packId: string) => {\r\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        acsessAPI.deleteCardsPacks(packId)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getAllPack())\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppErrorAC(error.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addNewPackTC = (addNewPackObject: NewPackFieldsType) => {\r\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const newPackObject: NewPackObjectDataType = {\r\n            cardsPack: {\r\n                ...addNewPackObject\r\n            }\r\n        }\r\n        acsessAPI.postCardPacks(newPackObject)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getAllPack())\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppErrorAC(error.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateCardPack = (packId: string, packUpdateObject: PackUpdateFieldsType) => {\r\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>) => {\r\n        const updatePackQueryObject = {\r\n            cardsPack: packUpdateObject\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        acsessAPI.updateCardPacks(updatePackQueryObject)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getAllPack())\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppErrorAC(error.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n};\r\nconst instance = axios.create({\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    ...settings\r\n})\r\n\r\n// Types for delete card object\r\n\r\nexport interface DeleteCardResponseType {\r\n    deletedCard: UpdateCardType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n// Types for post card object\r\nexport interface PostCardResponseType {\r\n    newCard: CardType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n// Types for Update Card Request\r\nexport interface UpdateCardType extends CardType {\r\n    answerImg: string\r\n    answerVideo: string\r\n    questionImg: string\r\n    questionVideo: string\r\n}\r\n\r\n// Types for Update Card Request\r\nexport interface UpdateCardResponseType {\r\n    updatedCard: UpdateCardType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n// Types for Update card request\r\n\r\n// Update Card Fields\r\nexport interface UpdateCardFieldsType {\r\n    _id?: string\r\n    question?: string\r\n    answer?: string\r\n    comments?: string\r\n    grade?: number\r\n    shots?: number\r\n    type?: string\r\n    /*more_id? : \"6101043d9906843f45c0f27f\",*/\r\n    __v?: 0,\r\n    answerImg?: string\r\n    answerVideo?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n}\r\n\r\nexport interface UpdateCardQueryType {\r\n    card: UpdateCardFieldsType\r\n}\r\n\r\n// Types for post card object\r\n\r\nexport interface PostCardFieldsType {\r\n    cardsPack_id?: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: 0 | 1 | 3 | 4 | 5\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\n\r\nexport interface PostCardQueryType {\r\n    card: PostCardFieldsType\r\n}\r\n\r\n// Types for Get Card Query\r\nexport interface GetCardQueryType {\r\n    params: {\r\n        cardsPack_id: string\r\n        cardAnswer?: string | null\r\n        cardQuestion?: string | null\r\n        min?: number | null\r\n        max?: number | null\r\n        sortCards?: string | null\r\n        page?: number | null\r\n        pageCount?: number | null\r\n    }\r\n}\r\n\r\n// Types for Get Card Query\r\nexport interface CardType {\r\n    _id: string\r\n    cardsPack_id: string\r\n    user_id: string\r\n    answer: string\r\n    question: string\r\n    grade: number\r\n    shots: number\r\n    comments: string\r\n    type: string\r\n    rating: number\r\n    more_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n}\r\n\r\n// Types for Get Card Query\r\nexport interface GetCardResponseType {\r\n    cards: Array<CardType>\r\n    packUserId: string\r\n    page: number\r\n    pageCount: number\r\n    cardsTotalCount: number\r\n    minGrade: number\r\n    maxGrade: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type UserProfileType = {\r\n    _id: string;\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: string,\r\n    update: string,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error: string\r\n}\r\n\r\nexport type UserLoginType = {\r\n    _id: string;\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number\r\n}\r\n\r\ntype registrationUserType = {\r\n    addedUser: {}\r\n    error?: string\r\n}\r\n\r\nexport type UserForgotPassType = {\r\n    info: string\r\n    success: boolean\r\n    answer: boolean\r\n    html: boolean\r\n}\r\nexport type UserNewPasswordType = {\r\n    info: string\r\n}\r\n\r\nexport interface PackResponseDataType {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    private: boolean\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    cardsCount: number\r\n    type: string\r\n    rating: number\r\n    created: string\r\n    updated: string\r\n    more_id: string\r\n    __v: number\r\n}\r\n\r\nexport interface PackDataType extends Omit<PackResponseDataType, 'created' | 'updated'> {\r\n    created: Date\r\n    updated: Date\r\n}\r\n\r\nexport interface GetPackResponseType {\r\n    cardPacks: Array<PackResponseDataType>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number\r\n    minCardsCount: number\r\n    maxCardsCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport interface GetPackResponseWithDateType extends Omit<GetPackResponseType, 'cardPacks'> {\r\n    cardPacks: Array<PackDataType>\r\n}\r\n\r\nexport interface DeletePackResponseType {\r\n    deletedCardsPack: PackResponseDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type NewPackResponseType = {\r\n    newCardsPack: PackResponseDataType,\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport interface PackUpdateResponseDataType extends PackResponseDataType {\r\n    deckCover: string\r\n}\r\n\r\nexport interface UpdatePackResponseType {\r\n    updatedCardsPack: PackUpdateResponseDataType,\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport interface NewPackFieldsType {\r\n    name?: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    privateDeck?: boolean\r\n    type?: string\r\n}\r\n\r\nexport interface NewPackObjectDataType {\r\n    cardsPack: NewPackFieldsType\r\n}\r\n\r\nexport interface GetPackQueryParamsType {\r\n    params?: {\r\n        packName?: string | null\r\n        min?: number | null\r\n        max?: number | null\r\n        sortPacks?: string | null\r\n        page?: number | null\r\n        pageCount?: number | null\r\n        user_id?: string | null\r\n    }\r\n}\r\n\r\n export interface PackUpdateFieldsType {\r\n     _id?: string\r\n     name?: string\r\n     path?: string\r\n     grade?: number\r\n     shots?: number\r\n     rating?: number\r\n     deckCover?: string\r\n     private?: boolean\r\n     type?: string\r\n }\r\n\r\nexport interface PackUpdateObjectType {\r\n    cardsPack: PackUpdateFieldsType\r\n}\r\n\r\nexport const acsessAPI = {\r\n    loginUser(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<UserProfileType>(\"/auth/login\", {email, password, rememberMe});\r\n\r\n    },\r\n    logoutUser() {\r\n        return instance.delete<UserProfileType>(\"/auth/login\",);\r\n\r\n    },\r\n    registrationUser(email: string, password: string) {\r\n        return instance.post<registrationUserType>(\"/auth/register\", {email, password})\r\n\r\n    },\r\n    forgotPassword(email: string, from: string, message: string) {\r\n        return instance.post<UserForgotPassType>(\"/auth/forgot\", {email, from, message});\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<UserNewPasswordType>(\"/auth/set-new-password\", {password, resetPasswordToken});\r\n    },\r\n    authUser() {\r\n        return instance.post<any>(\"/auth/me\", {});\r\n    },\r\n\r\n    postCardPacks(pack: NewPackObjectDataType) {\r\n        return instance.post<NewPackResponseType>(\"/cards/pack\", pack);\r\n    },\r\n    getCardPacks(queryPackObject: GetPackQueryParamsType) {\r\n        return instance.get<GetPackResponseType>(\"/cards/pack\", queryPackObject);\r\n    },\r\n    deleteCardsPacks(id: string) {\r\n        return instance.delete<DeletePackResponseType>(\"/cards/pack\", {params: {id}});\r\n    },\r\n    updateCardPacks(packUpdateObject: PackUpdateObjectType) {\r\n        return instance.put<PackUpdateResponseDataType>(\"/cards/pack\", packUpdateObject);\r\n    },\r\n    // API for cards\r\n    getAllCards(queryCardsObject: GetCardQueryType) {\r\n        return instance.get<GetCardResponseType>(\"/cards/card\", queryCardsObject);\r\n    },\r\n    postCard(newCardObject: PostCardQueryType) {\r\n        return instance.post<PostCardResponseType>(\"/cards/card\", newCardObject);\r\n    },\r\n    updateCardById(cardUpdateObject: UpdateCardQueryType) {\r\n        return instance.put<UpdateCardResponseType>(\"/cards/card\", cardUpdateObject);\r\n    },\r\n    deleteCardByID(id: string) {\r\n        return instance.delete<DeleteCardResponseType>(\"/cards/card\", {params: {id}});\r\n    },\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","type InitStateType = {\r\n    errorMessage: string | null\r\n    appStatus: AppStatusType\r\n    error: string | null\r\n};\r\n\r\nconst initState: InitStateType = {\r\n    errorMessage: null,\r\n    appStatus: 'idle',\r\n    error: null\r\n};\r\nexport type AppStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type CombinedActionType = SetMessageErrorActionType\r\n    | SetAppStatusType\r\n    | SetAppErrorActionType\r\n\r\nexport const appReducer = (state = initState, action: CombinedActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-ERROR-MESSAGE\": {\r\n            return {...state, errorMessage: action.errorMessage}\r\n        }\r\n        case \"APP/SET-APP-STATUS\" : {\r\n            return {...state, appStatus: action.value}\r\n        }\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport const setMessageErrorAC = (errorMessage: string) => ({type: \"APP/SET-ERROR-MESSAGE\", errorMessage} as const)\r\nexport const setAppStatusAC = (value: AppStatusType) => ({type: \"APP/SET-APP-STATUS\", value} as const);\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\n\r\nexport type SetMessageErrorActionType = ReturnType<typeof setMessageErrorAC>\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>","import {acsessAPI, UserProfileType} from \"../../m3-dal/Api\";\r\nimport {Dispatch} from 'redux';\r\nimport {setAppErrorAC, setAppStatusAC, setMessageErrorAC} from \"./app-reducer\";\r\n\r\n\r\nexport type InitStateType = typeof initState;\r\n\r\nconst initState = {\r\n    isLoggedIn: false,\r\n    error: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    isFetching: false,\r\n    isPassRequestSent: false,\r\n    isPassChanged: false,\r\n    _id: \"\",\r\n    name: \"\",\r\n    avatar: \"\",\r\n    publicCardPacksCount: 0,\r\n    created: \"\",\r\n    update: \"\",\r\n    isAdmin: false,\r\n    verified: false,\r\n    rememberMe: false,\r\n};\r\n\r\nexport const authReducer = (state: InitStateType = initState, action: CombinedActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"IS-LOGGED-IN\": {\r\n            return {...state, isLoggedIn: action.value, error: action.error};\r\n        }\r\n        case \"SIGN_UP\":\r\n            return {\r\n                ...state,\r\n                email: action.email,\r\n                password: action.password,\r\n                error: action.message as string,\r\n            };\r\n        case \"IS_FETCHING\":\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case \"RESTORE/SET-PASS-REQUEST\" : {\r\n            return {...state, isPassRequestSent: action.value}\r\n        }\r\n        case \"RESTORE/SET-PASS-CHANGED\" : {\r\n            return {...state, isPassChanged: action.value}\r\n        }\r\n        case \"ADD-PROFILE\": {\r\n            return {...state, ...action.value};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype CombinedActionType = LoggedInType\r\n    | SignupActionType\r\n    | SetIsFetchingSignupActionType\r\n    | SetPassRequestType\r\n    | SetPassChangedType\r\n    | profileACType;\r\n\r\nexport type LoggedInType = ReturnType<typeof loggedInAC>;\r\nexport type SignupActionType = ReturnType<typeof signupAC>;\r\nexport type SetIsFetchingSignupActionType = ReturnType<typeof setIsFetchingSignupAC>;\r\nexport type SetPassRequestType = ReturnType<typeof setPassRequestAC>\r\nexport type SetPassChangedType = ReturnType<typeof setPassChangedAC>\r\nexport type profileACType = ReturnType<typeof profileAC>\r\n\r\nexport const loggedInAC = (value: boolean, error: string) =>\r\n    ({type: \"IS-LOGGED-IN\", value, error} as const);\r\n\r\nexport const signupAC = (email: string, password: string, message?: string) =>\r\n    ({type: 'SIGN_UP', email, password, message} as const);\r\n\r\nexport const setIsFetchingSignupAC = (isFetching: boolean) =>\r\n    ({type: 'IS_FETCHING', isFetching} as const);\r\n\r\nexport const setPassRequestAC = (value: boolean) => ({type: \"RESTORE/SET-PASS-REQUEST\", value} as const);\r\nexport const setPassChangedAC = (value: boolean) => ({type: \"RESTORE/SET-PASS-CHANGED\", value} as const);\r\n\r\nexport const profileAC = (value: UserProfileType) => ({type: \"ADD-PROFILE\", value} as const);\r\n\r\n// thunks-------------------------------------------------------------------\r\n\r\nexport const loggedInTC = (email: string, password: string, rememberMe: boolean) => {\r\n    return (dispatch: Dispatch) => {\r\n        acsessAPI.loginUser(email, password, rememberMe)\r\n            .then((res) => {\r\n                dispatch(profileAC(res.data))\r\n                dispatch(loggedInAC(true, \"\"))\r\n            })\r\n            .catch(rej => {\r\n                //    if has response and has data\r\n                if (rej.response?.data) {\r\n                    dispatch(loggedInAC(false, rej.response.data.error))\r\n                } else {\r\n                    dispatch(loggedInAC(false, \"network error\"))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<CombinedActionType>) => {\r\n    acsessAPI.logoutUser()\r\n        .then(res => {\r\n            //  dispatch(profileAC(res.data))\r\n            dispatch(loggedInAC(false, \"\"))\r\n        }).catch((rej) => {\r\n        // if (rej.response.data){\r\n        // console.log(rej.response.data.error)\r\n        dispatch(loggedInAC(false, rej.response.data.error))\r\n    })\r\n}\r\n\r\n\r\nexport const authMeTC = () => {\r\n    return (dispatch: Dispatch<CombinedActionType>) => {\r\n        acsessAPI.authUser()\r\n            .then((res) => {\r\n                dispatch(profileAC(res.data))\r\n                dispatch(loggedInAC(true, \"\"))\r\n            }).catch(rej => {\r\n            const error = rej.response\r\n                ? rej.response.data.error\r\n                : (rej.message + ', more details in the console');\r\n            console.log(error)\r\n        })\r\n    }\r\n}\r\n\r\nexport const registrationThunk = (email: string, password: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        acsessAPI.registrationUser(email, password)\r\n            .then(() => {\r\n                dispatch(signupAC(email, password));\r\n                dispatch(setIsFetchingSignupAC(true));\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppErrorAC(error.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n                const message = error.response.data.error\r\n                dispatch(signupAC(email, password, message))\r\n                //  dispatch(setAppErrorAC(error.message))\r\n                //   dispatch(setAppStatusAC(\"failed\"))\r\n            })\r\n    }\r\n}\r\n\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\r\n    return (dispatch: Dispatch<any>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        acsessAPI.setNewPassword(password, resetPasswordToken)\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    dispatch(setPassChangedAC(true))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppErrorAC(error.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n                if (error.response && error.response.status) {\r\n                    if (error.response?.data?.error) {\r\n                        dispatch(setMessageErrorAC(error.response.data.error))\r\n                    } else {\r\n                        dispatch(setMessageErrorAC('Something went wrong'))\r\n                    }\r\n                } else {\r\n                    dispatch(setMessageErrorAC('Something went wrong'))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const forgotPassTC = (email: string) => {\r\n    return (dispatch: Dispatch<any>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const from = \"santari33@gmail.com\";\r\n        const message = \"<div>password recovery link: <a href='https://maunonen.github.io/it-incubator-ignat-project/#/set-new-password/$token$'>link</a></div>\";\r\n\r\n        acsessAPI.forgotPassword(email, from, message)\r\n            .then((res) => {\r\n                console.log('Thunk', res)\r\n                if (res.data.success) {\r\n                    dispatch(setPassRequestAC(true))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppErrorAC(error.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n                if (error.response && error.response.status) {\r\n                    dispatch(setMessageErrorAC(error.response.data.error))\r\n                    dispatch(setPassRequestAC(false))\r\n                    /*if (error.response.status === 404) {\r\n                        // Request made and server responded\r\n                        /!*console.log(error.response.data);\r\n                        console.log(error.response.status);\r\n                        console.log(error.response.headers);*!/\r\n                        dispatch(setMessageErrorAC(error.response.data.error))\r\n                        dispatch(setPassRestoredAC(false))\r\n\r\n                    } else if (error.response.status === 400) {\r\n                        dispatch(setMessageErrorAC(error.response.data.error))\r\n                        dispatch(setPassRestoredAC(false))\r\n                    } else if (error.response.status === 500) {\r\n                        dispatch(setMessageErrorAC(error.response.data.error))\r\n                        dispatch(setPassRestoredAC(false))\r\n                    }*/\r\n                } else {\r\n                    dispatch(setMessageErrorAC(\"Something went wrong\"))\r\n                    dispatch(setPassRequestAC(false))\r\n                    if (error.request) {\r\n                        // The request was made but no response was received\r\n                        console.log(error.request);\r\n                    } else {\r\n                        // Something happened in setting up the request that triggered an Error\r\n                        console.log('Error', error.message);\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {\r\n    Button, Card, createStyles, FormControl, FormGroup, Checkbox,\r\n    Grid, makeStyles, TextField, Theme, Typography, FormControlLabel, Link\r\n} from \"@material-ui/core\";\r\nimport {loggedInTC} from \"../../m2-bll/redux/auth-reducer\";\r\nimport {PATH} from \"../Routes\";\r\n\r\n\r\nconst useStyles = makeStyles<Theme>(theme => createStyles({\r\n    root: {\r\n        textAlign: \"center\",\r\n        padding: \"30px 30px\",\r\n        width: \"413px\",\r\n    },\r\n    formTitle: {\r\n        marginBottom: \"30px\",\r\n    },\r\n    formSubtitle: {\r\n        marginBottom: \"40px\",\r\n    },\r\n    formDescription: {\r\n        marginBottom: \"40px\",\r\n    },\r\n    formButtonBlock: {\r\n        margin: \"0px 35px\",\r\n        display: \"flex\",\r\n        alignItems: \"\",\r\n    },\r\n    displayStretch: {\r\n        display: \"flex\",\r\n        alignItems: \"stretch\"\r\n    },\r\n    textFieldArea: {\r\n        margin: \"0px 10px\"\r\n    },\r\n}))\r\n\r\nconst LoginPage: React.FC = () => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n    const isLoggedError = useSelector((state: AppStoreType) => state.auth.error)\r\n\r\n    const restoreSchema = Yup.object().shape({\r\n        email: Yup.string().email('Invalid email').required('Required'),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            remember: false\r\n        },\r\n        validationSchema: restoreSchema,\r\n        onSubmit: values => {\r\n            dispatch(loggedInTC(values.email, values.password, values.remember))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid\r\n        container\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        style={{minHeight: '100vh'}}\r\n    >\r\n        <Grid item>\r\n            <Card className={classes.root}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Typography\r\n                        variant={\"h1\"}\r\n                        className={classes.formTitle}\r\n                    >It-Incubator\r\n                    </Typography>\r\n                    <Typography\r\n                        variant={\"h2\"}\r\n                        className={classes.formSubtitle}\r\n                    >Signin</Typography>\r\n                    <div style={{color: \"red\"}}>{isLoggedError}</div>\r\n                    <FormControl className={classes.displayStretch}>\r\n                        <FormGroup className={classes.textFieldArea}>\r\n                            <TextField\r\n                                type=\"email\"\r\n                                label=\"Email\"\r\n                                margin=\"dense\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            { formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            }\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"password\"\r\n                                margin=\"dense\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                            }\r\n                            <Typography\r\n                                variant={\"body1\"}\r\n                                className={classes.formDescription}\r\n                                align={\"left\"}\r\n                            >Enter your email address and password\r\n                            </Typography>\r\n\r\n\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                                // onChange={changeRememberCheckboxHandler}\r\n                                {...formik.getFieldProps('remember')}\r\n                            />\r\n\r\n                            <div className={classes.formButtonBlock}>\r\n                            <Button\r\n                                type={'reset'}\r\n                                onClick={() => {formik.resetForm()}}\r\n                                variant={'contained'}\r\n                                className={classes.formButtonBlock}\r\n                                color={'primary'}>\r\n                                Reset\r\n                            </Button>\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                className={classes.formButtonBlock}\r\n                                color={'primary'}>\r\n                                Login\r\n                            </Button>\r\n                            </div>\r\n\r\n                            <Typography\r\n                                variant={\"body1\"}\r\n                                className={classes.formLinkTitle}\r\n                                style={{ marginTop : \"30px\", marginBottom : \"15px\"}}\r\n                            >Don't have an account</Typography>\r\n                            <Link\r\n                                component={NavLink}\r\n                                to={PATH.SIGNUP}\r\n                                color={\"textPrimary\"}\r\n                            >Sign up\r\n                            </Link>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Card>\r\n        </Grid>\r\n    </Grid>\r\n}\r\nexport default LoginPage\r\n","import React, {useEffect} from 'react'\r\nimport { Grid} from '@material-ui/core'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {authMeTC, InitStateType} from \"../../m2-bll/redux/auth-reducer\"\r\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes\";\r\nimport {UserProfileType} from \"../../m3-dal/Api\";\r\n\r\n\r\nexport const ProfilePage: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppStoreType, InitStateType>(state => state.auth)\r\n    const userProfile = useSelector<AppStoreType, UserProfileType>(state => state.auth)\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userProfile._id) {\r\n            dispatch(authMeTC())\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (userProfile._id) {\r\n        return (\r\n            <Grid container justify=\"center\">\r\n                <Grid item xs={5}>\r\n                    <h1>User profile</h1>\r\n                    <h3>Id {userProfile._id}</h3>\r\n                    <h3>Email {userProfile.email}</h3>\r\n                    <h3>Name {userProfile.name}</h3>\r\n                    <h3>Avatar <img src={userProfile.avatar} style={{width: 100}}/></h3>\r\n                    <h3>PublicCardPacksCount= {userProfile.publicCardPacksCount}</h3>\r\n                    <h3>created {userProfile.created}</h3>\r\n                    <h3>update= {userProfile.update}</h3>\r\n                    <h3>isAdmin= {userProfile.isAdmin}</h3>\r\n                    <h3>verified= {userProfile.verified}</h3>\r\n                    <h3>rememberMe= {userProfile.rememberMe}</h3>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    } else {\r\n        return (\r\n            <Redirect from={PATH.ALL_ROUTES} to=\"/login\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfilePage\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst NotFoundPage : React.FC = () => {\r\n    return (\r\n        <>\r\n            <h1>Not found page</h1>\r\n        </>\r\n    )\r\n}\r\nexport default NotFoundPage","import React from \"react\";\r\n\r\nexport interface MessageIconPropsType {\r\n    size?: string\r\n}\r\n\r\nconst LoadingIcon: React.FC<MessageIconPropsType> = ({size}) => {\r\n    return (\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width={size}\r\n            height={size}\r\n            viewBox=\"0 0 512 512\"\r\n        >\r\n            <path\r\n                fill=\"#6e75e2\"\r\n                d=\"M30 256C30 131.383 131.383 30 256 30c46.867 0 91.563 14.211 129.196 40.587h-29.074c-8.284 0-15 6.716-15 15s6.716 15 15 15h70.292c8.284 0 15-6.716 15-15V15.295c0-8.284-6.716-15-15-15s-15 6.716-15 15v37.339C366.987 18.499 312.91 0 256 0 187.62 0 123.333 26.629 74.98 74.98 26.629 123.333 0 187.62 0 256c0 44.921 11.871 89.182 34.33 127.998 2.78 4.806 7.818 7.49 12.997 7.49 2.55 0 5.134-.651 7.499-2.019 7.17-4.149 9.619-13.325 5.471-20.496C40.477 334.718 30 295.652 30 256zM477.67 128.002c-4.15-7.171-13.328-9.619-20.496-5.47-7.17 4.149-9.619 13.325-5.471 20.496C471.523 177.281 482 216.346 482 256c0 124.617-101.383 226-226 226-46.863 0-91.551-14.215-129.18-40.587h29.058c8.284 0 15-6.716 15-15s-6.716-15-15-15H85.587c-8.284 0-15 6.716-15 15v70.292c0 8.284 6.716 15 15 15s15-6.716 15-15v-37.376C145.013 493.475 199.083 512 256 512c68.38 0 132.667-26.629 181.02-74.98C485.371 388.667 512 324.38 512 256c0-44.923-11.871-89.184-34.33-127.998z\"\r\n            ></path>\r\n            <path\r\n                fill=\"#e2dff4\"\r\n                d=\"M377.424 285.689l-13.599-7.852c1.446-7.162 2.175-14.469 2.175-21.838s-.729-14.676-2.175-21.838l13.599-7.852a15.001 15.001 0 005.49-20.49l-20-34.641c-4.142-7.174-13.315-9.632-20.49-5.49l-13.602 7.853a108.886 108.886 0 00-37.821-21.856V136c0-8.284-6.716-15-15-15h-40c-8.284 0-15 6.716-15 15v15.686a108.89 108.89 0 00-37.822 21.856l-13.601-7.853c-7.174-4.144-16.349-1.685-20.49 5.49l-20 34.641c-4.142 7.174-1.684 16.348 5.49 20.49l13.598 7.851c-1.446 7.163-2.176 14.47-2.176 21.838s.729 14.676 2.176 21.838l-13.598 7.851c-7.174 4.142-9.632 13.316-5.49 20.49l20 34.641c4.142 7.175 13.315 9.633 20.49 5.49l13.601-7.853a108.865 108.865 0 0037.822 21.856V376c0 8.284 6.716 15 15 15h40c8.284 0 15-6.716 15-15v-15.686a108.886 108.886 0 0037.821-21.856l13.602 7.853c7.174 4.142 16.348 1.683 20.49-5.49l20-34.641a15.003 15.003 0 00-5.49-20.491zM256 296c-22.091 0-40-17.909-40-40s17.909-40 40-40 40 17.909 40 40-17.909 40-40 40z\"\r\n            ></path>\r\n            <path\r\n                fill=\"#bebcdd\"\r\n                d=\"M384.413 217.203a14.994 14.994 0 00-1.499-11.382l-20-34.641c-4.142-7.174-13.315-9.632-20.49-5.49l-13.602 7.853a108.886 108.886 0 00-37.821-21.856V136c0-8.284-6.716-15-15-15H256v95c22.091 0 40 17.909 40 40s-17.909 40-40 40v95h20.001c8.284 0 15-6.716 15-15v-15.686a108.886 108.886 0 0037.821-21.856l13.602 7.853c7.174 4.142 16.348 1.683 20.49-5.49l20-34.641a15.003 15.003 0 001.499-11.382 14.994 14.994 0 00-6.989-9.108l-13.599-7.852C365.271 270.676 366 263.369 366 256s-.729-14.676-2.175-21.838l13.599-7.852a14.995 14.995 0 006.989-9.107z\"\r\n            ></path>\r\n            <path\r\n                fill=\"#f1f1f4\"\r\n                d=\"M256 311c-30.327 0-55-24.673-55-55s24.673-55 55-55 55 24.673 55 55-24.673 55-55 55zm0-80c-13.785 0-25 11.215-25 25s11.215 25 25 25 25-11.215 25-25-11.215-25-25-25z\"\r\n            ></path>\r\n            <path\r\n                fill=\"#e2dff4\"\r\n                d=\"M281 256c0 13.785-11.215 25-25 25v30c30.327 0 55-24.673 55-55s-24.673-55-55-55v30c13.785 0 25 11.215 25 25z\"\r\n            ></path>\r\n            <g fill=\"#525cdd\">\r\n                <path\r\n                    d=\"M426.413.295c-8.284 0-15 6.716-15 15v37.339C366.987 18.499 312.91 0 256 0v30c46.867 0 91.563 14.211 129.196 40.587h-29.074c-8.284 0-15 6.716-15 15s6.716 15 15 15h70.292c8.284 0 15-6.716 15-15V15.295c-.001-8.284-6.717-15-15.001-15zM477.67 128.002c-4.15-7.171-13.328-9.619-20.496-5.47-7.17 4.149-9.619 13.325-5.471 20.496C471.523 177.281 482 216.346 482 256c0 124.617-101.383 226-226 226v30c68.38 0 132.667-26.629 181.02-74.98C485.371 388.667 512 324.38 512 256c0-44.923-11.871-89.184-34.33-127.998z\"></path>\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default LoadingIcon;","import React from 'react'\r\nimport {Card, createStyles, Grid, makeStyles, Theme, Typography} from \"@material-ui/core\";\r\nimport LoadingIcon from \"../icons/LoadingIcon\";\r\n\r\n\r\nconst useStyles = makeStyles<Theme>(theme => createStyles({\r\n    root: {\r\n        textAlign: \"center\",\r\n        padding: \"30px 30px\",\r\n        maxWidth: \"413px\",\r\n    },\r\n    loadingTitle : {\r\n        margin: \"30px 40px\"\r\n    },\r\n    loadingMessage : {\r\n        margin: \"30px 40px\"\r\n    }\r\n}))\r\n\r\nexport type LoadingPropsType = {\r\n    message?: string\r\n}\r\n\r\nconst Loading: React.FC<LoadingPropsType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n    const {message} = props\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            style={{minHeight: '100vh'}}\r\n        >\r\n            <Card\r\n                className={classes.root}\r\n            >\r\n                <Grid item>\r\n                    <Typography\r\n                        variant={\"h1\"}\r\n                        className={classes.loadingTitle}\r\n                    >It-incubator</Typography>\r\n                    <LoadingIcon size={\"100px\"}/>\r\n                    {\r\n                        message &&\r\n                        <Typography\r\n                            variant={\"body1\"}\r\n                            className={classes.loadingMessage}\r\n                        >\r\n                            {message}\r\n                        </Typography>}\r\n                </Grid>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Loading","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Card, createStyles, FormControl,\r\n    FormGroup,\r\n    Grid, Link, makeStyles,\r\n    TextField, Theme, Typography\r\n} from \"@material-ui/core\";\r\nimport {PATH} from \"../Routes\";\r\nimport Loading from \"../common/c7-Progress/Loading\";\r\nimport {forgotPassTC} from \"../../m2-bll/redux/auth-reducer\";\r\n\r\nconst useStyles = makeStyles<Theme>(theme => createStyles({\r\n    root: {\r\n        textAlign: \"center\",\r\n        padding: \"30px 30px\",\r\n        /*maxWidth: \"413px\",*/\r\n        width: \"413px\",\r\n    },\r\n    formTitle: {\r\n        marginBottom: \"30px\",\r\n    },\r\n    formSubtitle: {\r\n        marginBottom: \"40px\",\r\n    },\r\n    formDescription: {\r\n        marginTop: \"20px\",\r\n        marginBottom: \"40px\",\r\n    },\r\n    formLinkTitle: {\r\n        paddingTop: \"30px\",\r\n        paddingBottom: \"15px\",\r\n    },\r\n    formButtonBlock: {\r\n        margin: \"0px 35px\"\r\n    },\r\n    displayStretch: {\r\n        display: \"flex\",\r\n        alignItems: \"stretch\"\r\n    },\r\n    textFieldArea: {\r\n        margin: \"0px 10px\"\r\n    }\r\n}))\r\n\r\n\r\n\r\n\r\nconst RestorePassPage: React.FC = () => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn} = useSelector((state: AppStoreType) => state.auth)\r\n    const {isPassRequestSent,} = useSelector((state: AppStoreType) => state.auth)\r\n    const {errorMessage, appStatus} = useSelector((state: AppStoreType) => state.app)\r\n\r\n\r\n    console.log(errorMessage)\r\n    console.log('App status', appStatus)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n    }\r\n\r\n    const restoreSchema = Yup.object().shape({\r\n        email: Yup.string().email('Invalid email').required('Required'),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validationSchema: restoreSchema,\r\n        onSubmit: values => {\r\n            dispatch(forgotPassTC(formik.values.email))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    if (appStatus === 'loading') {\r\n        return <Loading message={\"Wait a minute please\"}/>\r\n    }\r\n    if (isPassRequestSent) {\r\n        return <Redirect to={PATH.RESTORE_PASS_CHECK_EMAIL}/>\r\n    }\r\n\r\n    return <Grid\r\n        container\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        style={{minHeight: '100vh'}}\r\n    >\r\n        <Grid item>\r\n            <Card\r\n                className={classes.root}\r\n            >\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Typography\r\n                        variant={\"h1\"}\r\n                        className={classes.formTitle}\r\n                    >It-incubator</Typography>\r\n                    <Typography\r\n                        variant={\"h2\"}\r\n                        className={classes.formSubtitle}\r\n                    >Forget your password</Typography>\r\n                    <FormControl className={classes.displayStretch}>\r\n                        <FormGroup className={classes.textFieldArea}>\r\n                            <TextField\r\n                                type=\"email\"\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {\r\n                                formik.touched.email && formik.errors.email &&\r\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            }\r\n                            <Typography\r\n                                variant={\"body1\"}\r\n                                className={classes.formDescription}\r\n                                align={\"left\"}\r\n                            >\r\n                                Enter your email address and we will send you further instructions\r\n                            </Typography>\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                className={classes.formButtonBlock}\r\n                                color={'primary'}>Send instructions</Button>\r\n                            <Typography\r\n                                variant={\"body1\"}\r\n                                className={classes.formLinkTitle}\r\n                            >Did you remember your password</Typography>\r\n                            <Link\r\n                                component={NavLink}\r\n                                to={PATH.LOGIN}\r\n                                color={\"textPrimary\"}\r\n                            >Try logging in\r\n                            </Link>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Card>\r\n        </Grid>\r\n    </Grid>\r\n}\r\nexport default RestorePassPage","import React, {useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { Redirect} from \"react-router-dom\";\r\nimport { useParams } from 'react-router-dom'\r\n/*import {setNewPasswordTC} from \"../../m2-bll/redux/restore-pass-reducer\";*/\r\n/*import {setNew}*/\r\n\r\nimport {\r\n    Button,\r\n    Card, createStyles,\r\n    FormControl,\r\n    FormGroup,\r\n    Grid, IconButton, Input, InputAdornment,  makeStyles,\r\n    Theme, Typography\r\n} from \"@material-ui/core\";\r\nimport {PATH} from \"../Routes\";\r\nimport {Visibility, VisibilityOff} from '@material-ui/icons';\r\nimport {setNewPasswordTC} from \"../../m2-bll/redux/auth-reducer\";\r\n\r\n\r\nconst useStyles = makeStyles<Theme>(theme => createStyles({\r\n    root: {\r\n        textAlign: \"center\",\r\n        padding: \"30px 30px\",\r\n        maxWidth: \"413px\",\r\n    },\r\n    formTitle: {\r\n        marginBottom: \"30px\",\r\n    },\r\n    formSubtitle: {\r\n        marginBottom: \"20px\",\r\n    },\r\n    formDescription: {\r\n        marginTop: \"20px\",\r\n        marginBottom: \"40px\",\r\n    },\r\n    formLinkTitle: {\r\n        paddingTop: \"30px\",\r\n        paddingBottom: \"15px\",\r\n    },\r\n    formButtonBlock: {\r\n        margin: \"35px 35px\"\r\n    },\r\n    errorBlock: {\r\n        paddingTop: \"20px\"\r\n    }\r\n}))\r\n\r\n\r\nconst NewPassPage: React.FC = () => {\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const { isLoggedIn} = useSelector((state: AppStoreType) => state.auth)\r\n    const { isPassChanged} = useSelector((state: AppStoreType) => state.auth)\r\n    const { appStatus } = useSelector((state: AppStoreType) => state.app)\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const { token } = useParams<{token: string}>();\r\n    console.log('Token', token)\r\n\r\n    type FormikErrorType = {\r\n        password?: string\r\n    }\r\n\r\n    const restoreSchema = Yup.object().shape({\r\n        password: Yup.string()\r\n            .required('No password provided.')\r\n            .min(8, 'Password is too short - should be at least 8 character.')\r\n            .matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, 'Minimum eight characters, at least one letter, one number and one special character.'),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n        },\r\n        validationSchema: restoreSchema,\r\n        onSubmit: values => {\r\n            if (token) {\r\n                dispatch(setNewPasswordTC(formik.values.password, token))\r\n            }\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword)\r\n    }\r\n    const handleMouseDownPassword = () => {\r\n        setShowPassword(!showPassword)\r\n    }\r\n    if ( appStatus === 'loading') {\r\n        return <div>Loading</div>\r\n    }\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    if (isPassChanged) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return <Grid\r\n        container\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        style={{minHeight: '100vh'}}\r\n    >\r\n        <Card\r\n            className={classes.root}\r\n        >\r\n            <Grid item>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Typography\r\n                        variant={\"h1\"}\r\n                        className={classes.formTitle}\r\n                    >It-incubator</Typography>\r\n                    <Typography\r\n                        variant={\"h2\"}\r\n                        className={classes.formSubtitle}\r\n                    >Create new pasword</Typography>\r\n                    <FormControl>\r\n                        <FormGroup>\r\n                            <Input\r\n                                type={showPassword ? 'text' : 'password'}\r\n                                placeholder={\"Password\"}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={handleClickShowPassword}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                                {...formik.getFieldProps('password')}\r\n\r\n                            />\r\n                            {\r\n                                (formik.touched.password && formik.errors.password) ?\r\n                                    <div\r\n                                        style={{color: 'red'}}\r\n                                        className={classes.errorBlock}\r\n\r\n                                    >{formik.errors.password}</div> :\r\n                                    <br/>\r\n                            }\r\n                            <Typography\r\n                                variant={\"body1\"}\r\n                                className={classes.formDescription}\r\n                                align={\"left\"}\r\n                            >\r\n                                Create new password and we will send you further instructions to email\r\n                            </Typography>\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                className={classes.formButtonBlock}\r\n                                color={'primary'}>Create new password</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Card>\r\n    </Grid>\r\n}\r\nexport default NewPassPage","import React from \"react\";\r\n\r\nexport interface MessageIconPropsType  {\r\n    size? : string\r\n}\r\n\r\nconst MessageIcon : React.FC<MessageIconPropsType> = ({size}) =>  {\r\n    return (\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            /*width=\"512\"\r\n            height=\"512\"*/\r\n            height={ size }\r\n            width={ size }\r\n            viewBox=\"0 0 512 512\"\r\n        >\r\n            <linearGradient\r\n                id=\"SVGID_1_\"\r\n                x1=\"432.334\"\r\n                x2=\"198.334\"\r\n                y1=\"502.645\"\r\n                y2=\"192.646\"\r\n                gradientUnits=\"userSpaceOnUse\"\r\n            >\r\n                <stop offset=\"0\" stopColor=\"#d2deff\" stopOpacity=\"0\"></stop>\r\n                <stop offset=\"1\" stopColor=\"#b7c5ff\"></stop>\r\n            </linearGradient>\r\n            <path\r\n                fill=\"url(#SVGID_1_)\"\r\n                d=\"M501.873 153.583c-22.357-56.888-91.226-91.003-149.556-68.427-66.582 25.77-44.506 131.673-104.983 153.088-32.669 11.568-80.962-31.644-113.969-38.271-60.821-12.21-115.881 30.705-129.439 90.134-13.832 60.63 8.353 141.61 74.967 158.066 79.35 19.602 120.683-51.729 187.249-72.211 68.31-21.019 144.263 28.622 200.814-31.776 41.78-44.62 57.055-134.271 34.917-190.603z\"\r\n            ></path>\r\n            <path\r\n                fill=\"#2626bc\"\r\n                d=\"M476.847 178.593c0-39.497-32.019-71.517-71.517-71.517-30.6 0-56.699 19.225-66.91 46.25H79.812c-11.046 0-20 8.954-20 20v221.41c0 11.046 8.954 20 20 20h352.375c11.046 0 20-8.954 20-20v-162.14c15.099-13.113 24.66-32.435 24.66-54.003z\"\r\n                opacity=\"0.1\"\r\n            ></path>\r\n            <g fill=\"#fff\">\r\n                <path d=\"M432.187 389.736H79.812c-11.046 0-20-8.954-20-20v-221.41c0-11.046 8.954-20 20-20h352.375c11.046 0 20 8.954 20 20v221.41c0 11.046-8.954 20-20 20z\"></path>\r\n                <path d=\"M262.092 223.711l190.096 146.025c0 11.046-8.954 20-20 20H79.812c-11.046 0-20-8.954-20-20l190.096-146.025a10 10 0 0112.184 0z\"></path>\r\n                <path d=\"M249.908 294.352L59.812 148.326c0-11.046 8.954-20 20-20h352.375c11.046 0 20 8.954 20 20L262.092 294.352a10.002 10.002 0 01-12.184 0z\"></path>\r\n            </g>\r\n            <path\r\n                fill=\"#6583fe\"\r\n                d=\"M370.947 363.125h-32.134a5 5 0 01-5-5v-22.154a5 5 0 015-5h32.134a5 5 0 015 5v22.154a5 5 0 01-5 5z\"\r\n            ></path>\r\n            <path\r\n                fill=\"#2626bc\"\r\n                d=\"M311.871 342.743h-27.833a5 5 0 110-10h27.833a5 5 0 110 10zM311.871 363.125h-97.833a5 5 0 110-10h97.833a5 5 0 110 10z\"\r\n            ></path>\r\n            <g>\r\n                <ellipse\r\n                    cx=\"405.33\"\r\n                    cy=\"153.593\"\r\n                    fill=\"#6583fe\"\r\n                    rx=\"71.517\"\r\n                    ry=\"71.517\"\r\n                    transform=\"rotate(-80.8 405.29 153.649)\"\r\n                ></ellipse>\r\n                <path\r\n                    fill=\"#2626bc\"\r\n                    d=\"M405.33 230.11c42.191 0 76.517-34.325 76.517-76.517s-34.325-76.517-76.517-76.517-76.517 34.325-76.517 76.517c0 24.544 11.629 46.41 29.653 60.421l-99.42 76.372a5.004 5.004 0 01-6.092 0L64.992 146c1.121-7.17 7.341-12.674 14.82-12.674h229.366a5 5 0 100-10H79.812c-13.785 0-25 11.215-25 25v221.41c0 13.785 11.215 25 25 25h352.375c13.785 0 25-11.215 25-25v-132.14a5 5 0 10-10 0V359.59L316.28 259.031l50.94-39.13a76.017 76.017 0 0038.11 10.209zm-209.61 28.921L64.812 359.59V158.472zm251.27 113.018c-1.118 7.174-7.32 12.687-14.803 12.687H79.812c-7.483 0-13.685-5.513-14.803-12.687l138.919-106.713 42.934 32.98c2.69 2.066 5.914 3.1 9.138 3.1s6.447-1.033 9.138-3.1l42.934-32.981zM338.813 153.593c0-36.677 29.839-66.517 66.517-66.517s66.517 29.839 66.517 66.517c0 36.677-29.839 66.517-66.517 66.517s-66.517-29.84-66.517-66.517z\"\r\n                ></path>\r\n            </g>\r\n            <path\r\n                fill=\"#fff\"\r\n                d=\"M374.114 129.204l10.206 24.389-10.206 24.389c-1.733 4.142 2.448 8.292 6.577 6.528l61.619-26.319c4.048-1.729 4.048-7.467 0-9.196l-61.619-26.319c-4.129-1.764-8.31 2.386-6.577 6.528z\"\r\n            ></path>\r\n            <g fill=\"#6583fe\">\r\n                <path d=\"M330.828 81.671a14.45 14.45 0 01-10.253-4.24c-5.654-5.654-5.654-14.853 0-20.506 5.651-5.652 14.852-5.654 20.505 0 5.654 5.654 5.654 14.853 0 20.506a14.45 14.45 0 01-10.252 4.24zm0-18.991a4.487 4.487 0 00-3.183 1.316 4.506 4.506 0 000 6.364 4.505 4.505 0 006.364 0 4.506 4.506 0 000-6.364 4.487 4.487 0 00-3.181-1.316zM218.538 459.315a14.457 14.457 0 01-10.253-4.24c-5.654-5.654-5.654-14.853 0-20.506 5.652-5.653 14.854-5.653 20.506 0 5.654 5.654 5.654 14.853 0 20.506a14.453 14.453 0 01-10.253 4.24zm0-18.991a4.487 4.487 0 00-3.183 1.316 4.506 4.506 0 000 6.364 4.506 4.506 0 006.365 0 4.506 4.506 0 000-6.364 4.487 4.487 0 00-3.182-1.316zM294.78 94.547a4.983 4.983 0 01-3.535-1.464l-5.965-5.964-5.965 5.964a5 5 0 01-7.07-7.071l9.5-9.5a5 5 0 017.07 0l9.5 9.5a5 5 0 01-3.535 8.535zM439.746 440.322a4.983 4.983 0 01-3.535-1.464l-5.965-5.964-5.965 5.964a5 5 0 01-7.07-7.071l9.5-9.5a5 5 0 017.07 0l9.5 9.5a5 5 0 01-3.535 8.535zM178.884 445.072a4.983 4.983 0 01-3.535-1.464l-5.965-5.964-5.965 5.964a5 5 0 01-7.07-7.071l9.5-9.5a5 5 0 017.07 0l9.5 9.5a5 5 0 01-3.535 8.535z\"></path>\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default MessageIcon;","import React from 'react'\r\nimport { useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { Redirect} from \"react-router-dom\";\r\n\r\nimport {Card, createStyles,\r\n\r\n    Grid,  makeStyles,\r\n     Theme, Typography\r\n} from \"@material-ui/core\";\r\nimport MessageIcon from '../common/icons/MessageIcon';\r\n\r\nconst useStyles = makeStyles<Theme>(theme => createStyles({\r\n    root: {\r\n        textAlign: \"center\",\r\n        padding: \"30px 30px\",\r\n        maxWidth: \"413px\",\r\n    },\r\n    formSubtitle: {\r\n        marginBottom: \"20px\",\r\n    },\r\n    formDescription: {\r\n        marginTop: \"20px\",\r\n        marginBottom: \"40px\",\r\n    },\r\n    formLinkTitle: {\r\n        paddingTop: \"30px\",\r\n        paddingBottom: \"15px\",\r\n    },\r\n    formButtonBlock: {\r\n        margin: \"0px 35px\"\r\n    },\r\n    formIcon: {\r\n        /*fontSize: \"64px\",*/\r\n        margin: \"25px 0px\",\r\n        color: \"#21268F\",\r\n        opacity: 0.7,\r\n    }\r\n}))\r\n\r\n\r\nconst RestorePassPage: React.FC = () => {\r\n\r\n    const classes = useStyles()\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid\r\n        container\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        style={{minHeight: '100vh'}}\r\n    >\r\n        <Card\r\n            className={classes.root}\r\n        >\r\n            <Grid item>\r\n                <Typography\r\n                    variant={\"h1\"}\r\n                    className={classes.formTitle}\r\n                >It-incubator</Typography>\r\n                <div className={classes.formIcon}>\r\n                    <MessageIcon\r\n                        size=\"72px\"\r\n                    />\r\n                </div>\r\n                <Typography\r\n                    variant={\"h2\"}\r\n                    className={classes.formSubtitle}\r\n                >Forget your password</Typography>\r\n                <Typography\r\n                    variant={\"body1\"}\r\n                    className={classes.formDescription}\r\n                >\r\n                    We’ve sent an Email with instructions to example@mail.com\r\n                </Typography>\r\n            </Grid>\r\n        </Card>\r\n    </Grid>\r\n}\r\nexport default RestorePassPage","import React, {useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetPackQueryParamsType} from \"../../../m3-dal/Api\";\r\nimport {getAllPack} from \"../../../m2-bll/redux/pack-reducer\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        /*width: 300,*/\r\n    },\r\n});\r\n\r\nfunction valuetext(value: number) {\r\n    return `${value}`;\r\n}\r\n\r\nexport default function RangeSlider() {\r\n\r\n    const classes = useStyles();\r\n    const pack = useSelector((state: AppStoreType) => state.pack);\r\n    const [value, setValue] = React.useState<number[]>([20, 37]);\r\n\r\n\r\n    //------------------ вынести в отдельную компоненту ------------------------------------\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const getAllPacks = () => {\r\n\r\n        dispatch(getAllPack())\r\n    };\r\n    //--------------------------------------------------------\r\n\r\n    const handleChange = (event: any, newValue: number | number[]) => {\r\n        setValue(newValue as number[]);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if ((pack.min != null) && pack.min !== value[0]  && pack.max && pack.max !== value[1]) {\r\n            setValue([pack.min, pack.max])\r\n        }\r\n    }, [pack]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n            const setTO = setTimeout(() => {\r\n                getAllPacks()\r\n            }, 1500)\r\n            return () => {\r\n                clearTimeout(setTO)\r\n            }\r\n        }, [value]\r\n\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <Slider\r\n                value={value}\r\n                onChange={handleChange}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n                getAriaValueText={valuetext}\r\n            />\r\n\r\n        </>\r\n    );\r\n}\r\n","import React, {useCallback, useMemo} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport RangeSlider from './RangeSlider' ;\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {ButtonGroup} from \"@material-ui/core\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 0,\r\n    },\r\n    privateModeHeader : {\r\n        marginBottom : \"20px\",\r\n    },\r\n    privateModeBlock : {\r\n        display: \"flex\",\r\n        alignItems: \"stretch\",\r\n        marginBottom : \"40px\",\r\n    },\r\n    modeButton : {\r\n        padding: \"8px 32px\",\r\n        borderRadius: \"0px\",\r\n        textAlign: \"center\",\r\n    },\r\n    paper: {\r\n        /*padding: theme.spacing(1),*/\r\n        /*textAlign: 'left',*/\r\n        /*color: theme.palette.text.secondary,*/\r\n        /*height: 600,*/\r\n        /*backgroundColor: \"#e2dfef\"*/\r\n    },\r\n    sliderCaption: {\r\n        marginBottom : \"40px\",\r\n        /*padding: theme.spacing(6),*/\r\n        /*textAlign: 'center',*/\r\n    },\r\n}));\r\n\r\nexport default function CenteredGrid() {\r\n    const classes = useStyles();\r\n\r\n    const myButtonClickHandler=()=>{\r\n        alert(\"MY cards show\")\r\n    };\r\n    const allButtonClickHandler=()=>{\r\n        alert(\"ALL cards show\")\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container>\r\n                <Typography\r\n                    variant=\"h3\"\r\n                    className={classes.privateModeHeader}\r\n                >\r\n                    Show pack cards\r\n                </Typography>\r\n                {/*<Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >*/}\r\n\r\n                <ButtonGroup\r\n                    variant=\"text\"\r\n                    color=\"primary\"\r\n                    aria-label=\"small outlined secondary button group\"\r\n                    /*aria-label=\"outlined primary button group\"*/\r\n                    className={classes.privateModeBlock}\r\n                >\r\n                    <Button onClick={myButtonClickHandler}\r\n                        className={classes.modeButton}\r\n                    >My</Button>\r\n                    <Button onClick={allButtonClickHandler}\r\n                        className={classes.modeButton}\r\n                    >ALL</Button>\r\n                </ButtonGroup>\r\n                    {/*<Button variant=\"contained\" color=\"primary\">*/}\r\n                    {/*    My*/}\r\n                    {/*  </Button>*/}\r\n                    {/*  <Button variant=\"contained\" color=\"secondary\">*/}\r\n                    {/*    All*/}\r\n                    {/*  </Button>*/}\r\n                {/*</Grid>*/}\r\n                <Typography\r\n                    variant=\"h3\"\r\n                    gutterBottom\r\n                    className={classes.sliderCaption}\r\n                >\r\n                    Number of cards\r\n                </Typography>\r\n                <RangeSlider/>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {PackDataType} from \"../../../m3-dal/Api\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\r\n\r\ninterface Data {\r\n    calories: number;\r\n    carbs: number;\r\n    fat: number;\r\n    name: string;\r\n    protein: number;\r\n}\r\n\r\nexport function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\ntype Order = 'asc' | 'desc';\r\n\r\nfunction getComparator<Key extends keyof any>(\r\n    order: Order,\r\n    orderBy: Key,\r\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\r\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\ninterface HeadCell {\r\n    disablePadding: boolean;\r\n    id: keyof PackDataType;\r\n    label: string;\r\n    numeric: boolean;\r\n}\r\n\r\nconst headCells: HeadCell[] = [\r\n    {id: 'name', numeric: false, disablePadding: false, label: 'Name'},\r\n    {id: 'cardsCount', numeric: true, disablePadding: false, label: 'Cards'},\r\n    {id: 'updated', numeric: true, disablePadding: false, label: 'Last updated'},\r\n    {id: 'user_name', numeric: true, disablePadding: false, label: 'Created by'},\r\n];\r\n\r\ninterface DeckTableHeaderPropsType {\r\n    numSelected: number;\r\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof PackDataType) => void;\r\n    onSelectAllClick?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    rowCount: number;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        paper: {\r\n            width: '100%',\r\n            marginBottom: theme.spacing(2),\r\n        },\r\n        table: {\r\n            minWidth: 750,\r\n        },\r\n        visuallyHidden: {\r\n            border: 0,\r\n            clip: 'rect(0 0 0 0)',\r\n            height: 1,\r\n            margin: -1,\r\n            overflow: 'hidden',\r\n            padding: 0,\r\n            position: 'absolute',\r\n            top: 20,\r\n            width: 1,\r\n        },\r\n    }),\r\n);\r\n\r\n\r\nconst DeckTableHeader: React.FC<DeckTableHeaderPropsType> = (props) => {\r\n    const classes = useStyles()\r\n    const {numSelected, rowCount, onRequestSort} = props;\r\n    const createSortHandler = (property: keyof PackDataType) => (event: React.MouseEvent<unknown>) => {\r\n        onRequestSort(event, property);\r\n    };\r\n    const {sortField, isSortTypeAscending} = useSelector((state: AppStoreType) => state.pack)\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\r\n                        sortDirection={isSortTypeAscending ? 'asc' : 'desc'}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={sortField === headCell.id}\r\n                            direction={isSortTypeAscending ? 'asc' : 'desc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {sortField === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                            {isSortTypeAscending ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n                <TableCell\r\n                    align={'center'}\r\n                >Action</TableCell>\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nexport default DeckTableHeader","import React, {useEffect} from 'react';\r\nimport {createStyles, lighten, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport DeckTableHeader from \"./DeckTableHeader\";\r\nimport {GetPackQueryParamsType, PackDataType} from \"../../../m3-dal/Api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\r\nimport {stat} from \"fs\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {\r\n    deletePackByIdTC,\r\n    getAllPack,\r\n    setPackSortType,\r\n    setPageAC,\r\n    setPageCountAC\r\n} from \"../../../m2-bll/redux/pack-reducer\";\r\nimport moment from 'moment'\r\n\r\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\ntype Order = 'asc' | 'desc';\r\n\r\nfunction getComparator<Key extends keyof any>(\r\n    order: Order,\r\n    orderBy: Key,\r\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n/*function stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\r\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}*/\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        paper: {\r\n            width: '100%',\r\n            marginBottom: theme.spacing(2),\r\n        },\r\n        table: {\r\n            minWidth: 750,\r\n        },\r\n        tableRow: {\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n        },\r\n        visuallyHidden: {\r\n            border: 0,\r\n            clip: 'rect(0 0 0 0)',\r\n            height: 1,\r\n            margin: -1,\r\n            overflow: 'hidden',\r\n            padding: 0,\r\n            position: 'absolute',\r\n            top: 20,\r\n            width: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nconst DeckTable: React.FC = () => {\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState<Order>('asc');\r\n    const [selected, setSelected] = React.useState<string[]>([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    /*const [rowsPerPage, setRowsPerPage] = React.useState(5);*/\r\n\r\n    /*const {cardPacks, isSortTypeAscending, sortField} = useSelector((state: AppStoreType) => state.pack)*/\r\n    const {pack} = useSelector((state: AppStoreType) => state)\r\n\r\n    const {_id} = useSelector((state: AppStoreType) => state.auth)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleRequestSort = (event: React.MouseEvent<unknown>, property: keyof PackDataType) => {\r\n        dispatch(setPackSortType(!pack.isSortTypeAscending, property))\r\n        /*setOrder(pack.isSortTypeAscending ? 'desc' : 'asc');*/\r\n    };\r\n\r\n    const getAllPacks = () => {\r\n        dispatch(getAllPack())\r\n    }\r\n\r\n\r\n    // useEffect(() => {\r\n    //     getAllPacks()\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        getAllPacks()\r\n    }, [pack.isSortTypeAscending, pack.sortField, pack.page, pack.pageCount, pack.packName])\r\n\r\n    /*const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.name);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };*/\r\n\r\n    /*const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected: string[] = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };*/\r\n\r\n    const handleChangePage = (event: unknown, newPage: number) => {\r\n        dispatch(setPageAC(newPage + 1));\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setPageCountAC(parseInt(event.target.value, 10)))\r\n        /*setPage(0);*/\r\n    };\r\n\r\n    const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    /*const isSelected = (name: string) => selected.indexOf(name) !== -1;*/\r\n\r\n    /*const emptyRows = pack.pageCount - Math.min(pack.pageCount, rows.length - page * pack.pageCount);*/\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        /*size={dense ? 'small' : 'medium'}*/\r\n                        size={'small'}\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <DeckTableHeader\r\n                            numSelected={selected.length}\r\n                            /*onSelectAllClick={handleSelectAllClick}*/\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={pack.cardPacksTotalCount}\r\n                        />\r\n                        <TableBody>\r\n                            {\r\n                                pack.cardPacks\r\n                                    .map((deck, index) => {\r\n                                        /*const isItemSelected = isSelected(deck.name);*/\r\n                                        const labelId = `enhanced-table-checkbox-${index}`;\r\n                                        return (\r\n                                            <TableRow\r\n                                                /*hover*/\r\n                                                /*onClick={(event) => handleClick(event, pack.name)}*/\r\n                                                role=\"checkbox\"\r\n                                                /*aria-checked={isItemSelected}*/\r\n                                                tabIndex={-1}\r\n                                                key={index}\r\n                                                /*selected={isItemSelected}*/\r\n                                                className={classes.tableRow}\r\n                                            >\r\n                                                <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"normal\">\r\n                                                    {deck.name.length > 20 ? deck.name.slice(0, 20) + '...' : deck.name}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"right\">{deck.cardsCount}</TableCell>\r\n                                                <TableCell\r\n                                                    align=\"right\">{moment(deck.updated).format(\"DD.MM.YYYY\")}</TableCell>\r\n                                                <TableCell align=\"right\">{deck.user_name}</TableCell>\r\n                                                <TableCell align=\"right\">\r\n                                                    {\r\n                                                        deck.user_id === _id &&\r\n                                                        <>\r\n                                                            <Button\r\n                                                                onClick={() => {\r\n                                                                    dispatch(deletePackByIdTC(deck._id));\r\n                                                                    getAllPacks();\r\n                                                                }}>Delete</Button>\r\n                                                            <Button>Edit</Button>\r\n                                                        </>\r\n                                                    }\r\n                                                    <Button>Learn</Button>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                            {/*{emptyRows > 0 && (\r\n                                <TableRow style={{height: (dense ? 33 : 53) * emptyRows}}>\r\n                                    <TableCell colSpan={6}/>\r\n                                </TableRow>\r\n                            )}*/}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 15]}\r\n                    component=\"div\"\r\n                    // total number of rows from server side\r\n                    count={pack.cardPacksTotalCount}\r\n                    // rows per page\r\n                    rowsPerPage={pack.pageCount}\r\n                    // current page(starts from 0) from server side - 1\r\n                    page={pack.page - 1}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            {/*<FormControlLabel\r\n                control={<Switch checked={dense} onChange={handleChangeDense}/>}\r\n                label=\"Dense padding\"\r\n            />*/}\r\n        </div>\r\n    );\r\n}\r\nexport default DeckTable\r\n","import React, {KeyboardEventHandler, useState} from 'react';\r\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addNewPackTC, setPackNameAC} from \"../../../m2-bll/redux/pack-reducer\";\r\nimport {NewPackFieldsType, NewPackObjectDataType} from \"../../../m3-dal/Api\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        rootGrid: {\r\n            flexGrow: 1,\r\n        },\r\n        search: {\r\n            display: \"flex\",\r\n            alignItems: \"stretch\",\r\n            /*marginRight: 40,*/\r\n            backgroundColor: \"#e2dfef\"\r\n        },\r\n        searchInputBlock: {\r\n            flexGrow: 3,\r\n        },\r\n        addDeckBlock: {\r\n            marginLeft: \"20px\",\r\n        }\r\n    }),\r\n);\r\n\r\nexport default function FullWidthGrid() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const [search, setSearch] = React.useState('');\r\n    const [type, setType] = useState<string>('')\r\n    const [name, setName] = useState<string>('first deck updated')\r\n    const [path, setPath] = useState<string>('')\r\n    const [grade, setGrade] = useState<number>(0)\r\n    const [shots, setShots] = useState<number>(0)\r\n    const [rating, setRating] = useState<number>(0)\r\n    const [deckCover, setDeckCover] = useState<string>('')\r\n    const [privateDeck, setPrivateDeck] = useState<boolean>(false)\r\n\r\n    const inputHandleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearch(event.target.value);\r\n    };\r\n\r\n    const addPack = () => {\r\n        let newPackObject: NewPackFieldsType = {\r\n                ...(name && {name: name}),\r\n                ...(path && {path: path}),\r\n                ...(grade && {grade: grade}),\r\n                ...(shots && {shots: shots}),\r\n                ...(rating && {rating: rating}),\r\n                ...(deckCover && {deckCover: deckCover}),\r\n                /*...( privateDeck && { private: privateDeck}),*/\r\n                ...(type && {typeDeck: type}),\r\n        }\r\n        dispatch(addNewPackTC(newPackObject))\r\n    }\r\n\r\n    const buttonClickHandler = () => {\r\n        addPack();\r\n        // dispatch(ignatBackRequest(value))\r\n    };\r\n\r\n\r\n\r\n\r\n    const handlePressEnter = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        console.log('Event', event)\r\n        /*if (event && event == 'Enter') {\r\n            //this.sendMessage();\r\n        }*/\r\n    }\r\n    /*const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setName(event.target.value);\r\n    };*/\r\n\r\n\r\n    return (\r\n        <div\r\n            /*className={classes.rootGrid}*/\r\n        >\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"flex-start\"\r\n                alignItems=\"stretch\"\r\n            >\r\n                <Grid\r\n                    item\r\n                    className={classes.searchInputBlock}\r\n                >\r\n                    <TextField\r\n                        size={\"small\"}\r\n                        className={classes.search}\r\n                        style={{backgroundColor: \"#ECECF9\"}}\r\n                        label=\"Search\"\r\n                        placeholder=\"Input list name\"\r\n                        variant=\"outlined\"\r\n                        onChange={inputHandleChange}\r\n                        /*onKeyDown={handlePressEnter}*/\r\n                        onKeyUp={(event) => {\r\n                            console.log('Event', event )\r\n                            if ( event.key === 'Enter'){\r\n                                if (!search){\r\n                                    dispatch(setPackNameAC(null))\r\n                                }\r\n                                console.log('Enter');\r\n                                dispatch(setPackNameAC(search));\r\n                                setSearch('');\r\n                            }\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid\r\n                    item\r\n                    className={classes.addDeckBlock}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={buttonClickHandler}\r\n                    >\r\n                        Add new pack\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport RangeShowCard from './RangeShowCard';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\r\nimport {getAllPack} from \"../../../m2-bll/redux/pack-reducer\";\r\nimport {Paper} from \"@material-ui/core\";\r\nimport DeckTable from \"../../common/c8-Table/DeckTable\";\r\nimport Search from './Search';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        /*flexGrow: 1,*/\r\n        marginTop: \"40px\",\r\n    },\r\n    paper: {\r\n        margin: 'auto',\r\n        maxWidth: 1200,\r\n    },\r\n    filterBlock: {\r\n        backgroundColor: \"#ECECF9\",\r\n        maxWidth: \"250px\",\r\n        padding: \"30px\",\r\n        flexGrow: 1,\r\n    },\r\n    mainBlock: {\r\n        width: \"fit-content\",\r\n        flexGrow: 3,\r\n        margin: \"30px\",\r\n        maxWidth: \"950px\",\r\n        boxSizing: \"border-box\",\r\n    },\r\n    mainSearchBlock: {\r\n        /*flexGrow: 1,*/\r\n        marginBottom: \"20px\",\r\n    },\r\n    mainSearchHeader: {\r\n        marginBottom: \"20px\",\r\n    },\r\n    mainTableBlock: {\r\n        /*maxWidth: \"500px\",*/\r\n    }\r\n}));\r\n\r\nexport default function Pack() {\r\n    const classes = useStyles();\r\n\r\n    const {_id} = useSelector((state: AppStoreType) => state.auth);\r\n    const pack = useSelector((state: AppStoreType) => state.pack);\r\n    const dispatch = useDispatch();\r\n\r\n    const getAllPacks = () => {\r\n        dispatch(getAllPack())\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllPacks();\r\n    }, []);\r\n\r\n\r\n    /*if (!_id) {\r\n        return (\r\n            <Redirect from={PATH.ALL_ROUTES} to=\"/login\"/>\r\n        )\r\n    }*/\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Paper\r\n                elevation={4}\r\n                className={classes.paper}\r\n                square={false}\r\n            >\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"flex-start\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid\r\n                        item\r\n                        className={classes.filterBlock}\r\n                    >\r\n                        <RangeShowCard/>\r\n                    </Grid>\r\n                    <Grid\r\n                        item\r\n                        className={classes.mainBlock}\r\n                    >\r\n                        <Grid\r\n                            item\r\n                            className={classes.mainSearchBlock}\r\n                            alignItems={\"stretch\"}\r\n                        >\r\n                            <Typography\r\n                                variant={\"h2\"}\r\n                                className={classes.mainSearchHeader}\r\n                            >\r\n                                Packs list\r\n                            </Typography>\r\n                            <Search/>\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            className={classes.mainTableBlock}\r\n                            alignItems={\"stretch\"}\r\n                        >\r\n                            <DeckTable/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {PATH} from \"../Routes\";\r\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\r\nimport {\r\n    FormControl,\r\n    FormGroup,\r\n    TextField,\r\n    Button,\r\n    Grid,\r\n    makeStyles,\r\n    Theme,\r\n    createStyles,\r\n    Card, Typography, Link\r\n} from '@material-ui/core'\r\nimport {registrationThunk} from \"../../m2-bll/redux/auth-reducer\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    cfPassword?: string\r\n}\r\n\r\nconst useStyles = makeStyles<Theme>(theme => createStyles({\r\n    root: {\r\n        textAlign: \"center\",\r\n        padding: \"30px 30px\",\r\n        /*maxWidth: \"413px\",*/\r\n        width: \"413px\",\r\n    },\r\n    formTitle: {\r\n        marginBottom: \"30px\",\r\n    },\r\n    formSubtitle: {\r\n        marginBottom: \"40px\",\r\n    },\r\n    formDescription: {\r\n        marginTop: \"20px\",\r\n        marginBottom: \"40px\",\r\n    },\r\n    formLinkTitle: {\r\n        paddingTop: \"30px\",\r\n        paddingBottom: \"15px\",\r\n    },\r\n\r\n    displayStretch: {\r\n        display: \"flex\",\r\n        alignItems: \"stretch\"\r\n    },\r\n    textFieldArea: {\r\n        margin: \"0px 10px\"\r\n    },\r\n    formButtonBlock: {\r\n        margin: \"0px 35px\",\r\n        display: \"flex\",\r\n        alignItems: \"\",\r\n    },\r\n    resetButton: {\r\n        flex: 1,\r\n        display: \"flex\",\r\n        alignItems: \"stretch\",\r\n        marginRight: \"15px\",\r\n    },\r\n    submitButton: {\r\n        flex: 1,\r\n        display: \"flex\",\r\n        alignItems: \"stretch\"\r\n    }\r\n}))\r\n\r\n\r\nconst SignupPage: React.FC = () => {\r\n\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch();\r\n    const isFetching = useSelector<AppStoreType>(state => state.auth.isFetching);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            cfPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 7) {\r\n                errors.password = 'Password must be 7 characters or more'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values));\r\n            if (values.email !== '' && values.password !== '' && values.cfPassword !== '') {\r\n                if (values.password === values.cfPassword) {\r\n                    dispatch(registrationThunk(values.email, values.password))\r\n                    formik.resetForm();\r\n                }\r\n            }\r\n        },\r\n        // onReset: values =>  {\r\n        //\r\n        //     if (values.email !== '' || values.password !== '' || values.cfPassword !== '') {\r\n        //     formik.resetForm()}\r\n        // }\r\n    })\r\n\r\n    if (isFetching) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n\r\n        <Grid container\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              style={{minHeight: '100vh'}}\r\n        >\r\n            <Grid item>\r\n                <Card\r\n                    className={classes.root}\r\n                >\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <Typography\r\n                            variant={\"h1\"}\r\n                            className={classes.formTitle}\r\n                        >It-incubator</Typography>\r\n                        <Typography\r\n                            variant={\"h2\"}\r\n                            className={classes.formSubtitle}\r\n                        >Sign up</Typography>\r\n                        <FormControl className={classes.displayStretch}>\r\n                            <FormGroup className={classes.textFieldArea}>\r\n                                <TextField\r\n                                    type=\"email\"\r\n                                    label=\"Email\"\r\n                                    margin=\"dense\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                />\r\n                                {formik.touched.email && formik.errors.email &&\r\n                                <div style={{'color': 'red'}}>{formik.errors.email}</div>}\r\n\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    margin=\"dense\"\r\n                                    {...formik.getFieldProps('password')}\r\n                                />\r\n                                {formik.touched.password && formik.errors.password &&\r\n                                <div style={{'color': 'red'}}>{formik.errors.password}</div>}\r\n\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    label=\"Confirm password\"\r\n                                    margin=\"dense\"\r\n                                    {...formik.getFieldProps('cfPassword')}\r\n                                />\r\n                                {formik.touched.cfPassword && formik.errors.cfPassword &&\r\n                                <div style={{'color': 'red'}}>{formik.errors.cfPassword}</div>}\r\n                                <Typography\r\n                                    variant={\"body1\"}\r\n                                    className={classes.formDescription}\r\n                                    style={{marginTop: \"20px\", marginBottom: \"30px\"}}\r\n                                    align={\"left\"}\r\n                                >Enter your email address and password</Typography>\r\n\r\n                                <div className={classes.formButtonBlock}>\r\n                                    <Button\r\n                                        onClick={() => {\r\n                                            formik.resetForm()\r\n                                        }}\r\n                                        className={classes.resetButton}\r\n                                        type={'reset'}\r\n                                        variant={'outlined'}\r\n                                        color={'secondary'}\r\n                                    >Cancel</Button>\r\n                                    <Button\r\n                                        type={'submit'}\r\n                                        variant={'contained'}\r\n                                        className={classes.submitButton}\r\n                                        color={'primary'}\r\n                                    >Register</Button>\r\n                                </div>\r\n                                <Typography\r\n                                    variant={\"body1\"}\r\n                                    className={classes.formLinkTitle}\r\n                                    style={{marginTop: \"0px\", marginBottom: \"15px\"}}\r\n                                >Already have an account?</Typography>\r\n                                <Link\r\n                                    component={NavLink}\r\n                                    to={PATH.LOGIN}\r\n                                    color={\"textPrimary\"}\r\n                                >Log in here\r\n                                </Link>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\nexport default SignupPage","import {\r\n    acsessAPI,\r\n    CardType,\r\n    GetCardQueryType,\r\n    GetPackQueryParamsType,\r\n    NewPackObjectDataType,\r\n    PackDataType,\r\n    PackResponseDataType,\r\n    PackUpdateObjectType,\r\n    PostCardFieldsType,\r\n    PostCardQueryType,\r\n    UpdateCardFieldsType,\r\n    UpdateCardQueryType\r\n} from \"../../m3-dal/Api\";\r\nimport {AppStatusType, setAppStatusAC, setMessageErrorAC} from \"./app-reducer\";\r\nimport {AnyAction, Dispatch} from \"redux\";\r\nimport store from '../redux/store'\r\n\r\n\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStoreType} from \"./store\";\r\n\r\nexport enum ACTIONS_TYPE {\r\n    SET_CARDS_ARRAY = 'CardReducer/SET_CARDS_ARRAY',\r\n    SET_PACK_USER_ID = 'CardReducer/SET_PACK_USER_ID',\r\n    SET_SORT_FIELD = 'CardReducer/SET_SORT_FIELD',\r\n    SET_SORT_ASC = 'CardReducer/SET_SET_SORT_ASC',\r\n    SET_PAGE = 'CardReducer/SET_PAGE',\r\n    SET_PAGE_COUNT = 'CardReducer/SET_PAGE_COUNT',\r\n    SET_CARDS_TOTAL_COUNT = 'CardReducer/SET_CARDS_TOTAL_COUNT',\r\n    SET_MIN_GRADE = 'CardReducer/SET_MIN_GRADE',\r\n    SET_MAX_GRADE = 'CardReducer/SET_MAX_GRADE',\r\n}\r\n\r\nexport interface InitialCardStateType {\r\n    cards: Array<CardType>\r\n    // current Pack id\r\n    packUserId: string\r\n    // for sort card in table\r\n    isSortTypeAscending: boolean\r\n    sortField: keyof CardType | null\r\n    // for pagination\r\n    page: number | null\r\n    pageCount: number | null\r\n    cardsTotalCount: number | null\r\n    // card grade\r\n    minGrade: number | null\r\n    maxGrade: number | null\r\n}\r\n\r\nconst initialCardState: InitialCardStateType = {\r\n    cards: [],\r\n    packUserId: '',\r\n    // Get card Query parameter\r\n    sortField: 'question',\r\n    isSortTypeAscending: false,\r\n    page: null,\r\n    pageCount: null,\r\n    cardsTotalCount: null,\r\n    minGrade: null,\r\n    maxGrade: null\r\n}\r\n\r\n\r\nexport const cardReducer = (state: InitialCardStateType = initialCardState, action: CombinedActionType): InitialCardStateType => {\r\n    /*console.log('action type', action.type)*/\r\n    /*console.log('action payload', action.payload)*/\r\n\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.SET_CARDS_ARRAY:\r\n        case ACTIONS_TYPE.SET_PACK_USER_ID:\r\n        case ACTIONS_TYPE.SET_SORT_FIELD:\r\n        case ACTIONS_TYPE.SET_SORT_ASC:\r\n        case ACTIONS_TYPE.SET_PAGE:\r\n        case ACTIONS_TYPE.SET_PAGE_COUNT:\r\n        case ACTIONS_TYPE.SET_CARDS_TOTAL_COUNT:\r\n        case ACTIONS_TYPE.SET_MIN_GRADE:\r\n        case ACTIONS_TYPE.SET_MAX_GRADE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport type CombinedActionType =\r\n    SetCardsArrayType | SetPackUserId |\r\n    SetSortFieldType | SetIsSortAscType |\r\n    SetPageType | SetPageCountType |\r\n    SetCardsTotalCountType | SetMinGradeType |\r\n    SetMaxGradeType\r\n\r\nexport type SetCardsArrayType = ReturnType<typeof setCardsArrayAC>\r\nexport type SetPackUserId = ReturnType<typeof setPackUserIdAC>\r\nexport type SetSortFieldType = ReturnType<typeof setSortFieldAC>\r\nexport type SetIsSortAscType = ReturnType<typeof setSortDirectionAscAC>\r\nexport type SetPageType = ReturnType<typeof setPageAC>\r\n\r\nexport type SetPageCountType = ReturnType<typeof setPageCountAC>\r\nexport type SetCardsTotalCountType = ReturnType<typeof setCardsTotalCountAC>\r\nexport type SetMinGradeType = ReturnType<typeof setMinGradeAC>\r\nexport type SetMaxGradeType = ReturnType<typeof setMaxGradeAC>\r\n\r\nexport const setMaxGradeAC = (maxGrade: number) => ({\r\n    type: ACTIONS_TYPE.SET_MAX_GRADE,\r\n    payload: {\r\n        maxGrade\r\n    }\r\n})\r\n\r\nexport const setMinGradeAC = (minGrade: number) => ({\r\n    type: ACTIONS_TYPE.SET_MIN_GRADE,\r\n    payload: {\r\n        minGrade\r\n    }\r\n})\r\n\r\nexport const setCardsTotalCountAC = (cardsTotalCount: number) => ({\r\n    type: ACTIONS_TYPE.SET_CARDS_TOTAL_COUNT,\r\n    payload: {\r\n        cardsTotalCount\r\n    }\r\n})\r\n\r\nexport const setPageCountAC = (pageCount: number) => ({\r\n    type: ACTIONS_TYPE.SET_PAGE_COUNT,\r\n    payload: {\r\n        pageCount\r\n    }\r\n})\r\n\r\nexport const setPageAC = (page: number) => ({\r\n    type: ACTIONS_TYPE.SET_PAGE,\r\n    payload: {\r\n        page\r\n    }\r\n})\r\n\r\nexport const setSortDirectionAscAC = (isSortTypeAscending: boolean) => ({\r\n    type: ACTIONS_TYPE.SET_SORT_ASC,\r\n    payload: {\r\n        isSortTypeAscending\r\n    }\r\n})\r\n\r\nexport const setSortFieldAC = (sortField: keyof CardType) => ({\r\n    type: ACTIONS_TYPE.SET_SORT_FIELD,\r\n    payload: {\r\n        sortField\r\n    }\r\n})\r\n\r\nexport const setPackUserIdAC = (packUserId: string) => ({\r\n    type: ACTIONS_TYPE.SET_PACK_USER_ID,\r\n    payload: {\r\n        packUserId\r\n    }\r\n})\r\n\r\nexport const setCardsArrayAC = (cards: Array<CardType>) => ({\r\n    type: ACTIONS_TYPE.SET_CARDS_ARRAY,\r\n    payload: {\r\n        cards\r\n    }\r\n})\r\n\r\n\r\nexport const getAllCardsTS = (packId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppStoreType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        // create sort field\r\n        let sortCards\r\n        // get query paramas from store\r\n        let {\r\n            page, pageCount, minGrade,\r\n            maxGrade, cardsTotalCount,\r\n            sortField, isSortTypeAscending\r\n        } = getState().card;\r\n\r\n        if (sortField) {\r\n            sortCards = +isSortTypeAscending + sortField;\r\n        }\r\n        // create query object\r\n        const cardsQueryObject: GetCardQueryType = {\r\n            params: {\r\n                cardsPack_id: packId,\r\n                ...(page !== null && {page: page}),\r\n                ...(pageCount !== null && {pageCount: pageCount}),\r\n                ...(minGrade !== null && {min: minGrade}),\r\n                ...(maxGrade !== null && {max: maxGrade}),\r\n                ...(cardsTotalCount !== null && {cardsTotalCount: cardsTotalCount}),\r\n                ...(sortCards && {sortCards: sortCards}),\r\n            }\r\n        }\r\n        acsessAPI.getAllCards(cardsQueryObject)\r\n            .then(res => {\r\n                if (res.data && res.data.cards.length > 0) {\r\n                    dispatch(setCardsArrayAC(res.data.cards))\r\n                } else {\r\n                    dispatch(setCardsArrayAC([]))\r\n                }\r\n                dispatch(setPageAC(res.data.page))\r\n                dispatch(setPageCountAC(res.data.pageCount))\r\n                dispatch(setCardsTotalCountAC(res.data.cardsTotalCount))\r\n                dispatch(setPackUserIdAC(res.data.packUserId))\r\n                dispatch(setMinGradeAC(res.data.minGrade))\r\n                dispatch(setMaxGradeAC(res.data.maxGrade))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setMessageErrorAC('Something went wrong'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const deleteCardByIdTC = (id: string) => {\r\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        acsessAPI.deleteCardByID(id)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getAllCardsTS(getState().card.packUserId))\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addNewCardTC = (packId: string, newCardFields: PostCardFieldsType) => {\r\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\r\n        // Combine post object from state\r\n        const newCardObject: PostCardQueryType = {\r\n            card: {\r\n                cardsPack_id: packId,\r\n                ...newCardFields\r\n            }\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        acsessAPI.postCard(newCardObject)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'));\r\n                dispatch(getAllCardsTS(packId));\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateCardTC = (_id: string, updatedCardFields: UpdateCardFieldsType) => {\r\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\r\n        let updatedCardQuery: UpdateCardQueryType = {\r\n            card: {\r\n                _id,\r\n                ...updatedCardFields\r\n            }\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        acsessAPI.updateCardById(updatedCardQuery)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(getAllCardsTS(getState().card.packUserId))\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {createStyles, lighten, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {stat} from \"fs\";\r\nimport {Button} from \"@material-ui/core\";\r\n/*import {\r\n    deletePackByIdTC,\r\n    getAllPack,\r\n    setPackSortType,\r\n    setPageAC,\r\n    setPageCountAC\r\n} from \"../../../m2-bll/redux/pack-reducer\";*/\r\nimport moment from 'moment'\r\nimport DeckTableHeader from '../../common/c8-Table/DeckTableHeader';\r\nimport {\r\n    getAllCardsTS,\r\n    setPageAC,\r\n    setPageCountAC,\r\n    setSortDirectionAscAC,\r\n    setSortFieldAC\r\n} from '../../../m2-bll/redux/card-reducer';\r\nimport { AppStoreType } from '../../../m2-bll/redux/store';\r\nimport {getAllPack} from \"../../../m2-bll/redux/pack-reducer\";\r\nimport {CardType, PackResponseDataType} from \"../../../m3-dal/Api\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\ntype Order = 'asc' | 'desc';\r\n\r\nfunction getComparator<Key extends keyof any>(\r\n    order: Order,\r\n    orderBy: Key,\r\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n/*function stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\r\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}*/\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        paper: {\r\n            width: '100%',\r\n            marginBottom: theme.spacing(2),\r\n        },\r\n        table: {\r\n            minWidth: 750,\r\n        },\r\n        tableRow: {\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n        },\r\n        visuallyHidden: {\r\n            border: 0,\r\n            clip: 'rect(0 0 0 0)',\r\n            height: 1,\r\n            margin: -1,\r\n            overflow: 'hidden',\r\n            padding: 0,\r\n            position: 'absolute',\r\n            top: 20,\r\n            width: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nconst CardListPage: React.FC = () => {\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState<Order>('asc');\r\n    const [selected, setSelected] = React.useState<string[]>([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const {packId} = useParams<{packId : string}>()\r\n    /*const [rowsPerPage, setRowsPerPage] = React.useState(5);*/\r\n\r\n    /*const {cardPacks, isSortTypeAscending, sortField} = useSelector((state: AppStoreType) => state.pack)*/\r\n    console.log('packId', packId )\r\n    const {card} = useSelector((state: AppStoreType) => state)\r\n\r\n    const {_id} = useSelector((state: AppStoreType) => state.auth)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleRequestSort = (event: React.MouseEvent<unknown>, property: keyof CardType) => {\r\n        dispatch(setSortDirectionAscAC(!card.isSortTypeAscending))\r\n        dispatch(setSortFieldAC(property))\r\n        /*setOrder(pack.isSortTypeAscending ? 'desc' : 'asc');*/\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCardsTS(packId))\r\n    }, [card.isSortTypeAscending, card.sortField, card.page, card.pageCount])\r\n\r\n    /*const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.name);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };*/\r\n\r\n    /*const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected: string[] = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };*/\r\n\r\n    const handleChangePage = (event: unknown, newPage: number) => {\r\n        dispatch(setPageAC(newPage + 1));\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setPageCountAC(parseInt(event.target.value, 10)))\r\n        /*setPage(0);*/\r\n    };\r\n\r\n    const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    /*const isSelected = (name: string) => selected.indexOf(name) !== -1;*/\r\n\r\n    /*const emptyRows = pack.pageCount - Math.min(pack.pageCount, rows.length - page * pack.pageCount);*/\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        /*size={dense ? 'small' : 'medium'}*/\r\n                        size={'small'}\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        {/*<DeckTableHeader\r\n                            numSelected={selected.length}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={card.cardsTotalCount}\r\n                        />*/}\r\n                        <TableBody>\r\n                            {\r\n                                card.cards.length > 0 && card.cards\r\n                                    .map((card, index) => {\r\n                                        /*const isItemSelected = isSelected(deck.name);*/\r\n                                        const labelId = `enhanced-table-checkbox-${index}`;\r\n                                        return (\r\n                                            <TableRow\r\n                                                /*hover*/\r\n                                                /*onClick={(event) => handleClick(event, pack.name)}*/\r\n                                                role=\"checkbox\"\r\n                                                /*aria-checked={isItemSelected}*/\r\n                                                tabIndex={-1}\r\n                                                key={index}\r\n                                                /*selected={isItemSelected}*/\r\n                                                className={classes.tableRow}\r\n                                            >\r\n                                                <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"normal\">\r\n                                                    {card.question.length > 20 ? card.question.slice(0, 20) + '...' : card.question}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"right\">\r\n                                                    {card.answer.length > 20 ? card.answer.slice(0, 20) + '...' : card.answer}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                    align=\"right\">{moment(card.updated).format(\"DD.MM.YYYY\")}</TableCell>\r\n                                                <TableCell align=\"right\">{card.grade}</TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                            {/*{emptyRows > 0 && (\r\n                                <TableRow style={{height: (dense ? 33 : 53) * emptyRows}}>\r\n                                    <TableCell colSpan={6}/>\r\n                                </TableRow>\r\n                            )}*/}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                {/*<TablePagination\r\n                    rowsPerPageOptions={[5, 10, 15]}\r\n                    component=\"div\"\r\n                    // total number of rows from server side\r\n                    count={card.cardsTotalCount}\r\n                    // rows per page\r\n                    rowsPerPage={card.pageCount}\r\n                    // current page(starts from 0) from server side - 1\r\n                    page={card.page - 1}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />*/}\r\n            </Paper>\r\n            {/*<FormControlLabel\r\n                control={<Switch checked={dense} onChange={handleChangeDense}/>}\r\n                label=\"Dense padding\"\r\n            />*/}\r\n        </div>\r\n    );\r\n}\r\nexport default CardListPage","import React from 'react'\r\nimport {Redirect, Switch, Route} from 'react-router-dom'\r\nimport LoginPage from './Pages/LoginPage'\r\nimport ProfilePage from \"./Pages/ProfilePage\";\r\nimport NotFoundPage from \"./Pages/NotFoundPage\";\r\nimport RestorePassPage from \"./Pages/RestorePassPage\";\r\nimport NewPassPage from \"./Pages/NewPassPage\";\r\nimport TestPage from \"./Pages/TestPage\";\r\nimport RestorePassCheckEmailPage from \"./Pages/RestorePassCheckEmailPage\";\r\nimport Loading from \"./common/c7-Progress/Loading\";\r\nimport Packs from \"./Pages/Pack/Packs\";\r\nimport Cards from \"./Pages/Cards/Packs\";\r\nimport SignupPage from \"./Pages/SignupPage\";\r\nimport CardListPage from \"./Pages/Cards/CardListPage\";\r\n\r\n\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    SIGNUP: '/signup',\r\n    PROFILE: '/profile',\r\n    NOTFOUND: '/404',\r\n    RESTORE_PASS: '/restore',\r\n    RESTORE_PASS_CHECK_EMAIL: '/check_email',\r\n    NEW_PASS: '/set-new-password',\r\n    PACK: '/pack',\r\n    CARDS: '/cards',\r\n    TEST_PAGE: '/test_page',\r\n    ALL_ROUTES : '*',\r\n}\r\n\r\nconst  Routes : React.FC = ()  => {\r\n\r\n    console.log('Routes App' )\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n\r\n                {/*в начале мы попадаем на страницу '/' и переходим сразу на страницу PROFILE*/}\r\n                {/*exact нужен чтоб указать полное совподение (что после '/' ничего не будет)*/}\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n\r\n                <Route path={PATH.LOGIN} exact render={() => <LoginPage/>}/>\r\n                <Route path={PATH.SIGNUP} exact render={() => <SignupPage/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <ProfilePage/>}/>\r\n                <Route path={PATH.RESTORE_PASS} render={() => <RestorePassPage/>}/>\r\n                <Route path={PATH.RESTORE_PASS_CHECK_EMAIL} render={() => <RestorePassCheckEmailPage/>}/>\r\n                <Route path={PATH.NEW_PASS + '/:token'} component={NewPassPage}/>\r\n                {/*<Route path={PATH.DESTINATION_LIST_PAGE + '/:id'} exact={true} component={DestinationProfileContainer} />*/}\r\n                <Route path={PATH.TEST_PAGE} render={() => <Loading message={\"Wait a minute please\"}/>}/>\r\n                <Route path={PATH.PACK} render={() => <Packs/>}/>\r\n                <Route path={PATH.CARDS + '/:packId'}  component={CardListPage}/>\r\n                <Route path={\"/NotFoundPage\"} render={() => <NotFoundPage/>}/>\r\n                <Redirect from={PATH.ALL_ROUTES} to={\"NotFoundPage\"}/>\r\n                {/*<Route render={() => <LoginPage/>}/>*/}\r\n            </Switch>\r\n\r\n\r\n                {/*у этого роута нет пути, он отрисуется если пользователь захочет попасть на несуществующую страницу*/}\r\n                {/*если бы не было path={PATH.ALL_ROUTES} render={() => */}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\r\nimport {NavLink, useHistory, useParams} from 'react-router-dom'\r\nimport s from './Header.module.css'\r\nimport {PATH} from \"../Routes\";\r\nimport {\r\n    AppBar,\r\n    Button, createStyles,\r\n    IconButton,\r\n    LinearProgress,\r\n    Link, List,\r\n    ListItem,\r\n    ListItemIcon, ListItemText,\r\n    makeStyles,\r\n    Theme,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\r\nimport CardsIcon from \"../common/icons/CardsIcon\";\r\nimport ProfileIcon from \"../common/icons/ProfileIcon\";\r\nimport { logoutTC } from '../../m2-bll/redux/auth-reducer';\r\n\r\nconst useStyles = makeStyles<Theme>(theme => createStyles({\r\n    root: {\r\n        backgroundColor: \"#EBE0E9\",\r\n\r\n    },\r\n    listBlock : {\r\n        display : \"flex\",\r\n        flexDirection: \"row\"\r\n    },\r\n    iconBlock : {\r\n    },\r\n    menuItem: {\r\n        color: \"#2D2E46\",\r\n    }\r\n}))\r\n\r\nconst Header: React.FC = () => {\r\n    const {appStatus} = useSelector((state: AppStoreType) => state.app)\r\n    const history = useHistory()\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppStoreType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <AppBar\r\n                position=\"static\"\r\n                className={classes.root}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        aria-label=\"menu\"\r\n                        className={classes.itemMenu}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h1\">\r\n                        It-Incubator\r\n                    </Typography>\r\n                    <div>\r\n                        {!isLoggedIn\r\n                            ? <Button\r\n                                color=\"inherit\"\r\n                                className={classes.menuItem}\r\n                                onClick={() => history.push(PATH.LOGIN)}\r\n                            >Login</Button>\r\n                            :   <Button\r\n                                color=\"inherit\"\r\n                                className={classes.menuItem}\r\n                                onClick={() =>  dispatch(logoutTC())}\r\n                            >Log out</Button>}\r\n\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            className={classes.menuItem}\r\n                            onClick={() => history.push(PATH.SIGNUP)}\r\n                        >Sign up</Button>\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            className={classes.menuItem}\r\n                            onClick={() => history.push(PATH.PROFILE)}\r\n                        >Profile</Button>\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            className={classes.menuItem}\r\n                            onClick={() => history.push(PATH.RESTORE_PASS)}\r\n                        >Restore Pass</Button>\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            className={classes.menuItem}\r\n                            onClick={() => history.push(PATH.NEW_PASS)}\r\n                        >New Pass</Button>\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            className={classes.menuItem}\r\n                            onClick={() => history.push(PATH.TEST_PAGE)}\r\n                        >Test Page</Button>\r\n\r\n                        {/*------------------ add PACK and CARDS in to header -------------- */}\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            className={classes.menuItem}\r\n                            onClick={() => history.push(PATH.PACK)}\r\n                        >Packs</Button>\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            className={classes.menuItem}\r\n                            onClick={() => history.push(PATH.CARDS)}\r\n                        >Cards</Button>\r\n\r\n                       {/* -------------------------------------------------------------   */}\r\n\r\n                    </div>\r\n                    {/*<List\r\n                        component=\"nav\"\r\n                        aria-label=\"main mailbox folders\"\r\n                        className={classes.listBlock}\r\n                    >\r\n                        <ListItem button>\r\n                            <ListItemIcon className={classes.iconBlock}>\r\n                                <CardsIcon size={\"40\"}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Inbox\" />\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                            <ListItemIcon>\r\n                                <ProfileIcon size={\"25\"}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Drafts\" />\r\n                        </ListItem>\r\n                    </List>*/}\r\n                </Toolbar>\r\n                {appStatus === 'loading' && <LinearProgress color={\"secondary\"}/>}\r\n            </AppBar>\r\n            {/*<nav className={s.menu}>\r\n                <div className={s.content}>\r\n                    <NavLink\r\n                        to={PATH.LOGIN}\r\n                        className={s.item}\r\n                    >Login</NavLink>\r\n                    <NavLink\r\n                        to={PATH.SIGNUP}\r\n                        className={s.item}\r\n                    >Sign up</NavLink>\r\n                    <NavLink\r\n                        to={PATH.PROFILE}\r\n                        className={s.item}\r\n                    >Profile</NavLink>\r\n                    <NavLink\r\n                        to={PATH.RESTORE_PASS}\r\n                        className={s.item}\r\n                    >Restore Pass</NavLink>\r\n                    <NavLink\r\n                        to={PATH.NEW_PASS}\r\n                        className={s.item}\r\n                    >New Pass</NavLink>\r\n                    <NavLink\r\n                        to={PATH.TEST_PAGE}\r\n                        className={s.item}\r\n                    >Test Page</NavLink>\r\n                    <div className={s.item + ' ' + s.waffel}>menu</div>\r\n                </div>\r\n            </nav>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\r\nimport {setAppErrorAC} from \"../../m2-bll/redux/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    // const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppStoreType, string | null >(state => state.app.error)\r\n   const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n      dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Routes from './m1-ui/Routes';\r\nimport Header from \"./m1-ui/Header/Header\";\r\nimport {ErrorSnackbar} from \"./m1-ui/ErrorSnackbar/ErrorSnackbar\";\r\n\r\n\r\nfunction App() {\r\n    console.log('Render App')\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <Header/>\r\n            <Routes/>\r\n            {/*commit from github.com page interface*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {combineReducers, createStore, applyMiddleware} from \"redux\"\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {packReducer} from \"./pack-reducer\";\r\nimport {cardReducer} from \"./card-reducer\";\r\n\r\n\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    app : appReducer,\r\n    pack : packReducer,\r\n    card : cardReducer,\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\n// window.store = store; // for dev\r\n","import {createTheme} from \"@material-ui/core\";\r\n\r\nexport const muiTheme = createTheme({\r\n    overrides: {\r\n        MuiCssBaseline: {\r\n            '@global': {\r\n                body: {\r\n                    background: 'linear-gradient(to bottom, #EBE0E9 30%, #9A91C8 90%)',\r\n                    backgroundRepeat: \"no-repeat\",\r\n                    backgroundAttachment: \"fixed\",\r\n                },\r\n            },\r\n        },\r\n\r\n        MuiButton: {\r\n            root: {\r\n                fontSize: '16px',\r\n                color: \"#21268F\",\r\n                fontFamily: 'SF UI Display, sans-serif',\r\n                fontWeight: 500,\r\n                fontStyle: \"normal\",\r\n                lineHeight: \"19px\",\r\n                borderRadius: \"30px\",\r\n                textTransform: \"none\",\r\n                padding: \"8px 16px\",\r\n            },\r\n        },\r\n        MuiCard: {\r\n            root: {\r\n                borderRadius : \"8px\",\r\n                backgroundColor : \"#F9F9FE\",\r\n            }\r\n        },\r\n        MuiLink: {\r\n            root : {\r\n                fontSize: '16px',\r\n                color: \"#21268F\",\r\n                fontFamily: 'SF UI Display, sans-serif',\r\n                fontWeight: 600,\r\n                fontStyle: \"normal\",\r\n                lineHeight: \"24px\",\r\n                borderRadius: \"30px\",\r\n            }\r\n        },\r\n        MuiTextField : {\r\n            root : {\r\n                fontWeight: 600,\r\n                fontFamily: 'SF UI Display, sans-serif',\r\n                fontStyle: \"normal\",\r\n                fontSize: \"16px\",\r\n                lineHeight: \"24px\",\r\n                color: \"#2D2E46\",\r\n            }\r\n        },\r\n        MuiInput : {\r\n            root : {\r\n                fontWeight: 300,\r\n                fontFamily: 'SF UI Display, sans-serif',\r\n                fontStyle: \"normal\",\r\n                fontSize: \"16px\",\r\n                lineHeight: \"24px\",\r\n                color: \"#2D2E46\",\r\n            }\r\n        }\r\n    },\r\n\r\n    typography: {\r\n        // Use the system font instead of the default Roboto font.\r\n        h1: {\r\n            fontWeight: 600,\r\n            fontStyle: \"normal\",\r\n            fontSize: \"26px\",\r\n            lineHeight: \"39px\",\r\n            fontFamily: \"Poppins\",\r\n            color: \"#2D2E46\",\r\n        },\r\n        h2: {\r\n            fontWeight: 600,\r\n            fontStyle: \"normal\",\r\n            fontSize: \"22px\",\r\n            lineHeight: \"33px\",\r\n            fontFamily: \"Poppins\",\r\n            color: \"#2D2E46\",\r\n        },\r\n        h3: {\r\n            fontWeight: 600,\r\n            fontStyle: \"normal\",\r\n            fontSize: \"16px\",\r\n            lineHeight: \"19px\",\r\n            fontFamily: 'SF UI Display, sans-serif',\r\n            color: \"#2D2E46\",\r\n        },\r\n        body1: {\r\n            fontWeight: 300,\r\n            fontStyle: \"normal\",\r\n            fontSize: \"16px\",\r\n            lineHeight: \"24px\",\r\n            fontFamily: 'SF UI Display, sans-serif',\r\n            color: \"#2D2E46\",\r\n            opacity: 0.6,\r\n        },\r\n        fontFamily: [\r\n            'Poppins',\r\n            'SF UI Display, sans-serif',\r\n            'Roboto',\r\n            '\"Helvetica Neue\"',\r\n            'Arial',\r\n            'sans-serif',\r\n        ].join(','),\r\n    },\r\n    palette: {\r\n        primary: {\r\n            light: '#b8f04a',\r\n            main: '#21268F',\r\n            dark: '#2D2E46'\r\n        },\r\n        secondary: {\r\n            light: '#e35ba2',\r\n            main: '#21268F',\r\n            dark: '#21268F'\r\n        },\r\n        error: {\r\n            main: '#ae2573',\r\n        },\r\n        warning: {\r\n            main: '#ffa500'\r\n        },\r\n        info: {\r\n            main: '#009cde',\r\n        },\r\n        text: {\r\n            primary: '#666666',\r\n            secondary: '#b3b3b3',\r\n        },\r\n    },\r\n\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from './n1-main/m2-bll/redux/store';\r\nimport {CssBaseline, MuiThemeProvider} from '@material-ui/core';\r\nimport {muiTheme} from \"./n1-main/m1-ui/common/theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <MuiThemeProvider theme={muiTheme}>\r\n          <CssBaseline/>\r\n          <Provider store={store}>\r\n              <HashRouter>\r\n              {/*<BrowserRouter>*/}\r\n                  <App />\r\n              {/*</BrowserRouter>*/}\r\n              </HashRouter>\r\n          </Provider>\r\n      </MuiThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}